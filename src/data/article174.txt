Автор: iakimov
Дата: 2021-10-05T14:53:05.000Z
Название: Использование сертификатов в ASP.NET Core
Теги: Информационная безопасность *, .NET *, ASP *
Текст:
В последнее время использование протокола HTTPS для Web-
ресурсов является обязательным требованиям ко всем более-
менее большим Web-проектам. Эта технология основана на использовании т
ак называемых сертификатов. Раньше за получение своего сертификата нуж
но было платить. Но сегодня появление таких сервисов, как Let's Encryp
t сделало возможным получение сертификатов бесплатно. Таким образом, ц
ена больше не служит оправданием отказа от использования HTTPS.В самом
 простом случае сертификат позволяет установить защищённое соединение 
между клиентом и сервером. Но это далеко не всё, на что они способны. 
В частности, недавно я смотрел на Pluralsight курс Microservices Secur
ity. И там среди прочих упоминалась такая вещь, как Mutual Transport L
ayer Security. Она позволяет не только клиенту убедиться в том, что он
 общается именно с тем сервером, с которым хочет, но и сервер может уз
нать, что за клиент с ним общается.Всё это накладывает на разработчико
в необходимость знать способы работы с сертификатами. Именно поэтому я
 и решил написать эту статью. Я задумал её как место, куда можно обрат
иться за основными сведениями, если что-
то забудешь. Не думаю, что специалисты найдут в ней что-то новое, но н
адеюсь, что она будет полезна новичкам и тем, кто захочет освежить сво
и знания в этом вопросе.Статья будет содержать следующие разделы:Что т
акое *сертификаты* и зачем они нужны?Как создать *самоподписанный* сер
тификат для тестирования на вашей машине?Как использовать сертификаты 
в ASP.NET Core на стороне сервера и на стороне клиента?Зачем нам нужны
 сертификатыПрежде чем приступать к работе с сертификатами, необходимо
 понять, зачем они нам нужны. Давайте рассмотрим пару человек. Традици
онно их называют Алисой и Бобом. Им необходимо общаться между собой, и
 единственным способом, которым они могут это сделать, является обмен 
сообщениями через открытый канал передачи данных:Алиса и БобВсе исполь
зуемые иконки созданы Vitaly Gorbachev на сайте FlaticonК сожалению, п
оскольку канал является открытым, любой при желании может прослушивать
 и даже изменять сообщения, которыми обмениваются Алиса и Боб:Человек 
посерединеЭта ситуация называется атакой "Человек посередине" (Man in 
the Middle).Как Алисе и Бобу защититься от этой опасности? На помощь п
риходит шифрование. Наиболее древними и распространёнными системами ши
фрования являются системы с симметричным ключом. В этом случае Алиса и
 Боб должны оба обладать абсолютно одинаковым (поэтому он и называется
 симметричным) ключом, который неизвестен никому более. Тогда, использ
уя какую-либо систему симметричного шифрования, они смогут обмениватьс
я сообщениями через открытый канал связи не опасаясь, что хакер сможет
 узнать содержание их сообщений или изменить их.Правда у хакера остаёт
ся возможность повторить отправку одного или нескольких сообщений, пер
еданных ранее. В ряде случаев это может так же представлять собой серь
ёзную опасность (представьте себе, что хакер может повторить запрос на
 перевод денег с одного счёта на другой). Но эта проблема эффективно р
ешается во всех современных системах передачи данных. (Например, в каж
дое сообщение добавляется порядковый номер. Если на принимающей сторон
е номер в сообщении не совпадает с ожидаемым, то такое сообщение отбра
сывается).Симметричное шифрованиеНо вернёмся к нашим Алисе и Бобу. Каж
ется, что проблема решена. Но не тут-то было. Загвоздка в том, как обо
им нашим участникам получить одинаковые ключи шифрования так, чтобы эт
от ключ не узнал никто другой. Ведь общаться они могут только по откры
тому каналу. Передача по этому каналу симметричного ключа приведёт к т
ому, что его узнает и хакер. Тогда он сможет расшифровывать и изменять
 сообщения Алисы и Боба.Что же делать? На помощь приходит асимметрично
е шифрование или шифрование с открытым ключом. Суть его состоит в след
ующем. Пусть Алиса хочет передать сообщение Бобу. Боб теперь генерируе
т не один, а два ключа - открытый и закрытый. Открытый ключ не предста
вляет секрета. Его Боб свободно раздаёт всем желающим общаться с ним. 
А вот закрытый ключ Боб хранит в тайне и не показывает никому, даже Ал
исе. Хитрость заключается в том, что если зашифровать сообщение с помо
щью открытого ключа, то расшифровать его можно только с помощью закрыт
ого ключа. И наоборот, сообщение, зашифрованное закрытым ключом, расши
фровывается открытым ключом.Теперь ясно, как Алиса и Боб должны действ
овать. Каждый из них генерирует свои открытый и закрытый ключи. Затем 
они обмениваются открытыми ключами через их канал связи. Поскольку отк
рытые ключи не представляют собой секрета, их можно передавать через о
ткрытые каналы. Закрытые ключи они хранят у себя в тайне. Пусть теперь
 Боб хочет послать сообщение Алисе. Он шифрует его открытым ключом Али
сы и посылает сообщение по каналу. Расшифровать сообщение может только
 обладатель закрытого ключа, т. е. только Алиса. Хакер этого сделать н
е может.Шифрование с открытым ключомНа самом деле всё чуть сложнее. Де
ло в том, что шифрование с открытым ключом работает намного медленнее 
симметричного шифрования. Шифровать таким способом большие объёмы данн
ых представляется неудобным. Поэтому, когда Боб хочет общаться с Алисо
й, он поступает следующим образом. Он генерирует новый ключ для систем
ы симметричного шифрования (его обычно называют сеансовым ключом). Пот
ом он шифрует этот сеансовый ключ открытым ключом Алисы и посылает его
 ей. Теперь у Алисы и Боба есть ключ симметричного шифрования, который
 неизвестен больше никому. С этого момента они свободно могут пользова
ться быстрыми алгоритмами симметричного шифрования.Казалось бы, пробле
ма решена. Но всё не так просто. Хакеру, контролирующему канал связи, 
есть что нам сказать. Проблема снова кроется в механизме распространен
ия ключей, но теперь уже открытых ключей. Давайте посмотрим, что может
 произойти.Пусть Алиса сгенерировала пару из открытого и закрытого клю
ча. Теперь она хочет передать свой открытый ключ Бобу. Она посылает эт
от ключ по каналу передачи данных. В этот момент хакер перехватывает э
тот ключ, не давая ему достичь Боба. Вместо этого хакер генерирует сво
ю пару из открытого и закрытого ключа. Затем он посылает Бобу свой отк
рытый ключ, говоря ему, что это открытый ключ Алисы. Настоящий же откр
ытый ключ Алисы хакер так же сохраняет у себя:Атака на распространение
 открытых ключейДа, теперь у нас фигурирует масса различных ключей. Да
вайте разберёмся, как всё это работает. Пусть Боб хочет послать сообще
ние Алисе. Он шифрует его открытым ключом, который, как он думает, при
надлежит Алисе. Но на самом деле ключ этот принадлежит хакеру. Хакер п
ерехватывает это сообщение, не давая ему достигнуть Алисы. Поскольку с
ообщение зашифровано открытым ключом хакера, то он может расшифровать 
его своим закрытым ключом, прочитать и изменить так, как сочтёт нужным
. После этого он зашифровывает сообщение настоящим открытым ключом Али
сы (помните, что он сохранил этот ключ у себя) и отправляет его ей. Ал
иса без проблем расшифровывает его своим закрытым ключом. Таким образо
м, Алиса получает сообщение от Боба и даже не догадывается, что оно бы
ло прочитано и, возможно, изменено хакером.Что же можно сделать, чтобы
 избежать подобного развития ситуации? И здесь мы подбираемся вплотную
 к сертификатам. Представьте себе, что Алиса распространяет по открыто
му каналу не просто свой открытый ключ, а ключ с прикреплённой к нему 
биркой, на которой написано, что этот ключ принадлежит Алисе. На бирке
 так же содержится подпись некоего уважаемого лица, которому доверяют 
как Алиса, так и Боб:Подписанный открытый ключСчитается, что ключ и би
рка на нём составляют единое целое. Бирку нельзя отсоединить от одного
 ключа и присоединить к другому. Тогда, если хакер не может подделать 
подпись, то он не может подделать и ключ. Боб, получив ключ с биркой, 
на которой написано, что это ключ Алисы, и стоит подпись, которой он д
оверяет, может быть уверен, что это именно ключ Алисы, а не кого-то др
угого.Можно считать, что ключ с такой биркой и представляют собой серт
ификат. Но как на самом деле он устроен в цифровом мире?В цифровом мир
е всё, что угодно, можно представить в виде последовательности бит (ну
лей и единиц). Это относится и к нашим ключам. Что же нужно сделать, ч
тобы создать цифровую подпись для такой последовательности бит? Такая 
подпись должна обладать следующими свойствами:Она должна быть короткой
. Представьте себе, что вы хотите создать цифровую подпись для файла с
 фильмом. Такой файл может занимать на диске десятки гигабайт. Если и 
наша подпись будет такого же размера, передавать её с файлом будет кра
йне накладно.Её должно быть невозможно (или на практике очень-очень тр
удно) подделать. Иначе хакер всё же сможет подсунуть Бобу свой ключ вм
есто ключа Алисы.Как же создать такую подпись? Можно поступить так. Сн
ачала для нашей последовательности бит считается так называемый хеш. В
ы передаёте вашу последовательность бит на вход некоторой функции (наз
ываемой функцией хеширования), и она возвращает вам другую последовате
льность бит, но уже очень короткую. Эта выходная последовательность и 
называется хешем. Все современные функции хеширования обладают следующ
ими свойствами:Для входной последовательности любой длины они всегда г
енерируют хеш одной и той же длины. Обычно эта длина не превышает неск
ольких десятков байт. Помните, что наша подпись должна быть короткой. 
Именно это свойство хеша и делает его удобным для использования в подп
иси.Зная только хеш, вы не можете сказать, из какой последовательности
 бит он был получен. Т. е. восстановление этой последовательности из х
еша невозможно.Если у вас есть значение хеша некоторой последовательно
сти бит, то вам очень трудно указать другую последовательность бит, да
ющую такой же хеш. Действительно, различных файлов длиной в 1 ГБайт оч
ень много. Но для каждого из них можно посчитать хеш длиной, скажем, в
сего в 32 байта. Различных последовательностей бит длиной в 32 байта н
амного меньше, чем различных файлов длиной в 1 ГБайт. Это значит, что 
обязательно будут существовать два различных файла длиной в 1 ГБайт, д
ающие один и тот же хеш. И тем не менее, зная один такой файл и его хе
ш, очень сложно узнать другой файл, дающий такой же хеш.С хешами разоб
рались. Но, к сожалению, сам по себе хеш не подходит на роль подписи. 
Да, он короткий, но его может посчитать любой. Хакер может сам вычисли
ть хеш для своего открытого ключа, ничто не препятствует ему сделать э
то. Как же нам сделать хеш устойчивым к подделке? Здесь на помощь нам 
снова приходит шифрование с открытым ключом.Помните, я говорил, что и 
Алиса, и Боб должны доверять подписи, которая стоит на бирке ключа. Пу
сть Алиса и Боб доверяют подписи Очень Важного Человека. Как же Очень 
Важный Человек может подписать ключ? Он генерирует свою пару из открыт
ого и закрытого ключа. Открытый ключ он передаёт Алисе и Бобу, а закры
тый хранит у себя. Когда ему нужно подписать открытый ключ Алисы, он п
оступает так. Сначала он считает хеш ключа Алисы, а затем шифрует этот
 хеш своим закрытым ключом. Именно хеш, зашифрованный закрытым ключом 
Очень Важного Человека (его обычно называют certificate authority) и я
вляется подписью. Поскольку никто не знает закрытого ключа Очень Важно
го Человека, то никто и не может подделать его подпись.С созданием под
писи мы разобрались. Осталось понять, как проверить её подлинность, ка
к проверить то, что подпись не была подделана. Итак, Боб получил некот
орый ключ, на бирке которого написано, что это открытый ключ Алисы. А 
также там присутствует подпись вроде бы Очень Важного Человека. Как эт
о проверить? Во-первых, Боб вычисляет хеш полученного открытого ключа.
 Помните, что это может сделать любой. Затем Боб расшифровывает подпис
ь с помощью открытого ключа Очень Важного Человека. Мы помним, что под
пись представляет собой тот же зашифрованный хеш. После этого Боб срав
нивает два хеша: посчитанный им самостоятельно и тот, который он получ
ил при расшифровке подписи. Если они совпадают, то всё в порядке, можн
о верить тому, что это ключ Алисы. Если же хеши отличаются, то доверят
ь такому ключу нельзя. Поскольку хакер не может создать правильную под
пись он не может и подсунуть Бобу другой ключ.Итак, как я уже сказал, 
сертификат, в сущности, представляет собой ключ и подпись к нему. На п
рактике в него добавляется масса иной информации:Кому принадлежит ключ
. В нашем случае Алисе.С какой и по какую дату этот ключ действителен.
Кто подписывал ключ. В нашем случае Очень Важный Человек. Это требуетс
я, если подписывать ключи могут разные certificate authorities.Какой а
лгоритм был использован для расчёта хеша и создания подписи.... и люба
я другая информация.Хеш и подпись строятся по всей совокупности этих д
анных, чтобы хакер не мог подделать ничего из них.Однако в нашей строг
ой схеме всё ещё существует одна брешь. Надеюсь, вы уже поняли к чему 
я веду. А каким образом Алиса и Боб получают открытый ключ Очень Важно
го Человека? Ведь если хакер сможет подсунуть им вместо настоящего клю
ча свой ключ, то всё пропало.Ну конечно же открытый ключ Очень Важного
 Человека распространяется так же с помощью сертификата, но теперь уже
 подписанного Очень-Очень Важным Человеком. Хм... А как же распростран
яется открытый ключ Очень-Очень Важного Человека? Ну конечно же тоже с
ертификатом. Ну вы поняли... там сертификаты до самого дна.Но шутки в 
сторону. Действительно, сертификат Алисы может быть подписан сертифика
том Очень Важного Человека, а тот - сертификатом Очень-Очень Важного Ч
еловека. Это называется цепочкой доверия. Но эта цепочка не бесконечна
. Обычно она заканчивается корневым сертификатом. Этот сертификат нике
м не подписан, а точнее, он подписан сам собой (self-signed certificat
e). Обычно корневые сертификаты принадлежат очень надёжным компаниям, 
которые, собственно, и занимаются тем, что подписывают другие сертифик
аты с помощью своих корневых сертификатов.Раньше эти компании брали де
ньги за подписывание сертификатов. Теперь появились сервисы типа Let's
 Encrypt, которые делают это бесплатно. Я думаю, что многие большие ко
мпании осознали, что лучше предоставлять сертификаты бесплатно и тем с
амым сделать Интернет более защищённым пространством, нежели иметь мас
су слабо защищённых сайтов, которые могут быть взломаны и использованы
 как площадки для атаки на эти же большие компании. Примерно то же сам
ое произошло и с антивирусами. Лет двадцать назад это были платные про
дукты. Теперь же обычный пользователь без проблем может найти бесплатн
ый качественный антивирус для установки на свой частный компьютер.Но в
ернёмся к сертификатам. Осталось рассмотреть последний вопрос. Почему 
же мы доверяем корневым сертификатам? Что мешает хакеру подменить их? 
А всё дело в способе их доставки на компьютеры Боба и Алисы. Дело в то
м, что основные корневые сертификаты не распространяются по открытому 
каналу, а устанавливаются вместе с операционной системой. Недавно неко
торые браузеры так же стали устанавливаться со своим набором доверенны
х сертификатов.Вот и всё, что я сегодня хотел сказать о сертификатах. 
С ними связана ещё масса интересных вещей, например, механизмы устарев
ания и отзыва сертификатов, но мы не будем касаться этого здесь. Пора 
нам перейти к практическим вещам.Создание сертификатовНадеюсь, я сумел
 убедить вас, что сертификаты - важная и необходимая вещь. И вы, как р
азработчик, решили, что пришло время научиться пользоваться ими. На са
мом деле при создании проекта ASP.NET Core из Visual Studio вы можете 
просто установить галочку Configure for HTTPS и вся необходимая инфрас
труктура будет создана для вас:Сконфигурировать для HTTPSНо я хочу пок
азать вам, как вы можете создавать сертификаты для тестирования ваших 
приложений. Мы создадим самоподписанный сертификат, т. е. сертификат, 
подписанный сам собой. Далее я покажу, как установить такой сертификат
 в систему, чтобы она начала доверять вашему сертификату.Давайте начнё
м. Всё, что нам потребуется, уже есть в .NET Core. Создадим консольное
 приложение и используем несколько полезных пространств имён:using Sys
tem.Security; using System.Security.Cryptography; using System.Securit
y.Cryptography.X509Certificates;Теперь нам нужно создать пару из откры
того и закрытого ключа. Собственно безопасным распространением открыто
го ключа и занимается сертификат:// Generate private-public key pair v
ar rsaKey = RSA.Create(2048);Далее нам необходимо создать запрос на се
ртификат:// Describe certificate string subject = "CN=localhost";
// Create certificate request
var certificateRequest = new CertificateRequest(     subject,
    rsaKey,     HashAlgorithmName.SHA256,
    RSASignaturePadding.Pkcs1 );Запрос на сертификат содержит информац
ию о том, для кого выписывается данный сертификат (переменная subject)
. Если мы хотим, чтобы сертификат использовался Web-сервером, который 
доступен нам через www.example.com, то содержимое переменной subject о
бязано быть равным CN=www.example.com. В данном случае мы хотим тестир
овать наш Web-сервер через localhost. Поэтому и значение переменной su
bject выбрано равным CN=localhost.Далее запросу на создание сертификат
а передаётся наша пара ключей и указывается, какие алгоритмы должны ис
пользоваться для вычисления хеша и расчёта подписи.Теперь нужно добави
ть некоторую дополнительную информацию о том, какой именно сертификат 
нам нужен. Укажем, что нам не требуется подписывать другие сертификаты
 с его помощью:certificateRequest.CertificateExtensions.Add(
    new X509BasicConstraintsExtension(
        certificateAuthority: false,
        hasPathLengthConstraint: false,
        pathLengthConstraint: 0,         critical: true     ) );Далее 
идёт нечто интересное. Дело в том, что сам по себе сертификат - просто
 хранилище для ключей шифрования. Эти ключи могут использоваться для р
азных целей. Мы уже встречались с их использованием для цифровой подпи
си и шифрования сеансового ключа. Но есть и другие применения. Теперь 
мы должны указать, для каких целей может быть использован наш сертифик
ат:certificateRequest.CertificateExtensions.Add(
    new X509KeyUsageExtension(         keyUsages:
            X509KeyUsageFlags.DigitalSignature
            | X509KeyUsageFlags.KeyEncipherment,
        critical: false     ) );Вы можете самостоятельно познакомиться
 с перечислением X509KeyUsageFlags, где указаны различные области прим
енения сертификатов.Далее указывается публичный ключ для идентификации
:certificateRequest.CertificateExtensions.Add(
    new X509SubjectKeyIdentifierExtension(
        key: certificateRequest.PublicKey,         critical: false
    ) );А теперь немножко чёрной магии. Я уже говорил вам, что чтобы с
ертификат мог использоваться для защиты сайта www.example.com, его пол
е subject должно содержать CN=www.example.com. Но для браузеров Chrome
 этого недостаточно. Кроме этого, поле Subject Alternative Name должно
 содержать DNS Name=www.example.com. Или в нашем случае оно должно сод
ержать DNS Name=localhost. Если этого не сделать, Chrome не будет дове
рять такому сертификату. К сожалению, я не нашёл удобоваримого способа
 выставить поле Subject Alternative Name для нашего сертификата. Но во
т этот кусочек кода устанавливает его в DNS Name=localhost:certificate
Request.CertificateExtensions.Add(     new X509Extension(
        new AsnEncodedData(             "Subject Alternative Name", 
          new byte[] { 48, 11, 130, 9, 108, 111, 99, 97, 108, 104, 111
, 115, 116 }         ),         false     ) );Всё, наш запрос на созда
ние сертификата полностью готов. Теперь мы можем создавать сам сертифи
кат:var expireAt = DateTimeOffset.Now.AddYears(5);  var certificate = 
certificateRequest.CreateSelfSigned(DateTimeOffset.Now, expireAt);Здес
ь мы указываем, что наш сертификат будет действительным в течение пяти
 лет с текущего момента.Вот и всё, у нас есть сертификат. Но пока он с
уществует лишь в оперативной памяти компьютера. Чтобы установить его в
 нашу систему, нужно сперва записать его на диск в виде файла формата 
PFX. Но тут есть одна тонкость. Файл, который мы хотим получить, долже
н содержать как открытый, так и закрытый ключи, чтобы использующий его
 сервер мог проводить любые операции шифрования и расшифровки. Но по с
оображениям безопасности созданный нами сертификат не предназначен для
 экспорта закрытого ключа. Получить готовый для экспорта сертификат мо
жно так:// Export certificate with private key
var exportableCertificate = new X509Certificate2(
    certificate.Export(X509ContentType.Cert),     (string)null,
    X509KeyStorageFlags.Exportable | X509KeyStorageFlags.PersistKeySet
).CopyWithPrivateKey(rsaKey);Для удобства ему можно добавить описание:
exportableCertificate.FriendlyName = "Ivan Yakimov Test-only Certifica
te For Client Authorization";Теперь мы может экспортировать сертификат
 в файл. Поскольку этот файл содержит и секретный закрытый ключ, то об
ычно его защищают паролем, чтобы даже в случае, если сам файл был укра
ден, злоумышленник не мог воспользоваться им:// Create password for ce
rtificate protection
var passwordForCertificateProtection = new SecureString();
foreach (var @char in "p@ssw0rd") {
    passwordForCertificateProtection.AppendChar(@char); }
// Export certificate to a file. File.WriteAllBytes(
    "certificateForServerAuthorization.pfx",
    exportableCertificate.Export(         X509ContentType.Pfx,
        passwordForCertificateProtection     ) );Теперь у нас есть фай
л сертификата, который можно использовать для защиты Web-сервера. Но в
ы так же можете создать файл сертификата, который будет использоваться
 для аутентификации клиентов этого сервера. Его создание практически н
ичем не отличается от серверного сертификата, только в поле subject мо
жно писать что угодно, и поле Subject Alternative Name не требуется://
 Generate private-public key pair var rsaKey = RSA.Create(2048);
// Describe certificate string subject = "CN=Ivan Yakimov";
// Create certificate request
var certificateRequest = new CertificateRequest(     subject,
    rsaKey,     HashAlgorithmName.SHA256,
    RSASignaturePadding.Pkcs1 );
certificateRequest.CertificateExtensions.Add(
    new X509BasicConstraintsExtension(
        certificateAuthority: false,
        hasPathLengthConstraint: false,
        pathLengthConstraint: 0,         critical: true     ) );
certificateRequest.CertificateExtensions.Add(
    new X509KeyUsageExtension(         keyUsages:
            X509KeyUsageFlags.DigitalSignature
            | X509KeyUsageFlags.KeyEncipherment,
        critical: false     ) );
certificateRequest.CertificateExtensions.Add(
    new X509SubjectKeyIdentifierExtension(
        key: certificateRequest.PublicKey,         critical: false
    ) );  var expireAt = DateTimeOffset.Now.AddYears(5);  var certific
ate = certificateRequest.CreateSelfSigned(DateTimeOffset.Now, expireAt
);  // Export certificate with private key
var exportableCertificate = new X509Certificate2(
    certificate.Export(X509ContentType.Cert),     (string)null,
    X509KeyStorageFlags.Exportable | X509KeyStorageFlags.PersistKeySet
).CopyWithPrivateKey(rsaKey);
exportableCertificate.FriendlyName = "Ivan Yakimov Test-
only Certificate For Client Authorization";
// Create password for certificate protection
var passwordForCertificateProtection = new SecureString();
foreach (var @char in "p@ssw0rd") {
    passwordForCertificateProtection.AppendChar(@char); }
// Export certificate to a file. File.WriteAllBytes(
    "certificateForClientAuthorization.pfx",
    exportableCertificate.Export(         X509ContentType.Pfx,
        passwordForCertificateProtection     ) );Теперь можно устанавл
ивать созданный нами сертификат в систему. Для этого в Windows выполни
те двойной щелчок мышью на PFX-файле сертификата. Откроется окно помощ
ника импорта. Укажите, что сертификат устанавливается только для текущ
его пользователя, а не для всей машины:Установить сертификат для текущ
его пользователяНа следующем экране вам предлагается указать файл серт
ификата, который вы будете импортировать. Оставьте его без изменений:В
ыбор файла сертификатаНа следующем экране введите пароль, который вы и
спользовали для защиты файла сертификата:Ввод пароляДалее укажите, что
 хотите установить ваш сертификат в Trusted Root Certification Authori
ties:Выбор хранилищаПомните, мы обсуждали, где заканчиваются цепочки д
оверия сертификатов. Так вот, хранилище Trusted Root Certification Aut
horities и хранит такие конечные (корневые) сертификаты, которым систе
ма доверяет без дальнейших проверок.На этом настройка импорта сертифик
ата закончена. Далее можно нажимать только Next, Finish и Ok.Теперь ва
ш сертификат присутствует в хранилище сертификатов Trusted Root Certif
ication Authorities. Вы можете открыть его в оснастке Manage User Cert
ificates из панели управления:Управление сертификатами пользователяВот
 как выглядит там наш сертификат:Наш сертификатСертификат для аутентиф
икации клиента устанавливается аналогичным образом.Прежде чем переходи
ть к тому, как использовать эти сертификаты в .NET коде, я хочу показа
ть вам ещё один приём, позволяющий генерировать самоподписанные сертиф
икаты. Если вы не хотите писать код создания сертификатов сами, но у в
ас есть PowerShell, вы можете сгенерировать сертификаты с его помощью.
Вот код, генерирующий сертификат для защиты сервера:$certificate = New
-SelfSignedCertificate `     -Subject localhost `
    -DnsName localhost `     -KeyAlgorithm RSA `     -KeyLength 2048 `
    -NotBefore (Get-Date) `     -NotAfter (Get-Date).AddYears(5) `
    -FriendlyName "Ivan Yakimov Test-
only Certificate For Server Authorization" `
    -HashAlgorithm SHA256 `
    -KeyUsage DigitalSignature, KeyEncipherment, DataEncipherment `
    -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.1")
$pfxPassword = ConvertTo-SecureString `     -String "p@ssw0rd" `
    -Force `     -AsPlainText  Export-PfxCertificate `
    -Cert $certificate `
    -FilePath "certificateForServerAuthorization.pfx" `
    -Password $pfxPasswordКоманды New-SelfSignedCertificate и Export-P
fxCertificate расположены в модуле pki. Я надеюсь, что параметры, пере
даваемые этим командам, уже понятны вам.А вот код, создающий сертифика
т для аутентификации клиента:$certificate = New-
SelfSignedCertificate `       -Type Custom `
      -Subject "Ivan Yakimov" `
      -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.2") `
      -FriendlyName "Ivan Yakimov Test-
only Certificate For Client Authorization" `
      -KeyUsage DigitalSignature `       -KeyAlgorithm RSA `
      -KeyLength 2048  $pfxPassword = ConvertTo-SecureString `
    -String "p@ssw0rd" `     -Force `     -AsPlainText  Export-
PfxCertificate `     -Cert $certificate `
    -FilePath "certificateForClientAuthorization.pfx" `     -Password 
$pfxPasswordТеперь рассмотрим вопрос использования созданных сертифика
тов.Как использовать сертификаты в .NET кодеИтак, у нас есть Web-серве
р, написанный на ASP.NET Core. И мы хотим защитить его созданным нами 
сертификатом. Сперва этот сертификат нужно получить в коде нашего серв
ера. Здесь есть два варианта.Первый вариант - получение сертификата из
 PFX-файла. Этот вариант применяется, если у вас есть файл сертификата
, который вы устанавливали в хранилище доверенных сертификатов. Тогда 
получить сертификат можно так:var certificate = new X509Certificate2(
    "certificateForServerAuthorization.pfx",     "p@ssw0rd" );Здесь ce
rtificateForServerAuthorization.pfx - имя файла сертификата, а p@ssw0r
d - пароль, который вы использовали для его защиты.Но не всегда файл с
ертификата доступен вам. В таком случае сертификат можно взять напряму
ю из хранилища:var store = new X509Store(StoreName.Root, StoreLocation
.CurrentUser);  store.Open(OpenFlags.ReadOnly);
var certificate = store.Certificates.OfType<X509Certificate2>()
    .First(c => c.FriendlyName == "Ivan Yakimov Test-only Certificate 
For Server Authorization");Значение StoreLocation.CurrentUser говорит,
 что мы хотим работать с хранилищем сертификатов текущего пользователя
, а не всего компьютера. Значение StoreName.Root говорит, что сам серт
ификат нужно искать в хранилище Trusted Root Certification Authorities
. Здесь для простоты выбор сертификата я осуществляю по имени, но вы м
ожете использовать любой удобный вам критерий.Теперь у нас есть сертиф
икат. Давайте заставим наш сервер использовать его. Для этого нам потр
ебуется немного изменить код в файле Program.cs:public class Program {
    public static void Main(string[] args)     {
        CreateHostBuilder(args).Build().Run();     }
    public static IHostBuilder CreateHostBuilder(string[] args)     { 
        var store = new X509Store(StoreName.Root, StoreLocation.Curren
tUser);         store.Open(OpenFlags.ReadOnly);         var certificat
e = store.Certificates.OfType<X509Certificate2>()
            .First(c => c.FriendlyName == "Ivan Yakimov Test-
only Certificate For Server Authorization");
        return Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>             {
                webBuilder                     .UseKestrel(options =>
                    {                         options.Listen(System.Ne
t.IPAddress.Loopback, 44321, listenOptions =>
                        {                             var connectionOp
tions = new HttpsConnectionAdapterOptions();  
    connectionOptions.ServerCertificate = certificate;
                           listenOptions.UseHttps(connectionOptions);
                        });                     })
                    .UseStartup<Startup>();             });     } }Как
 видите, вся магия происходит внутри метода UseKestrel. Здесь мы явно 
указываем, какой порт мы хотим использовать, и какой серверный сертифи
кат мы применяем.Теперь браузер воспринимает наш сайт, как защищённый:
Защищённый сайтНо не всегда мы работаем с Web-сервером через браузер. 
Иногда нам нужно обратиться к нему из кода. Тогда на помощь приходит H
ttpClient:var client = new HttpClient() {
    BaseAddress = new Uri("https://localhost:44321") };
var result = await client.GetAsync("data");
var content = await result.Content.ReadAsStringAsync();  Console.Write
Line(content);На самом деле стандартный HttpClient осуществляет провер
ку серверного сертификата и не будет выполнять соединение, если не смо
жет удостовериться в его подлинности. Но что, если мы хотим выполнить 
дополнительную проверку? Например, мы хотим проверить, кто именно подп
исал сертификат сервера. Или проверить какое-нибудь нестандартное поле
 этого сертификата. Сделать это возможно. Для этого нам необходимо опр
еделить метод, который будет выполняться после того, как система выпол
нит стандартную проверку сертификата:var handler = new HttpClientHandl
er() {     ServerCertificateCustomValidationCallback = (request, certi
ficate, chain, errors) => {
        if (errors != SslPolicyErrors.None) return false;
        return true;     } };  var client = new HttpClient(handler) {
    BaseAddress = new Uri("https://localhost:44321") };Этот метод прис
ваивается свойству ServerCertificateCustomValidationCallback объекта к
ласса HttpClientHandler. Сам же этот объект передаётся в конструктор H
ttpClient.Давайте рассмотрим наш метод проверки подробнее. Как я уже с
казал, он выполняется не вместо, а после стандартной проверки. Результ
аты этой проверки можно получить через последний параметр данного мето
да (`errors`). Если это значение не равно SslPolicyErrors.None, то ста
ндартная проверка не удалась и доверять такому сертификату нельзя. Кро
ме того, в данный метод передаётся информация о:Самом запросе (request
).Серверном сертификате (certificate).Цепочке доверия этого сертификат
а (chain). Здесь вы сможете найти более детально описанную причину тог
о, почему не удалась стандартна проверка сертификата, если это вам инт
ересно.Итак, мы познакомились с тем, как можно защитить сертификатом в
аш сервер. Но сертификат можно использовать и для аутентификации клиен
та. В этом случае сервер будет обслуживать запросы только тех клиентов
, которые предоставят ему "правильный" сертификат. Сертификат является
 правильным, если он прошёл проверку подлинности и, кроме того, удовле
творяет дополнительным условиям, которые накладывает на него сервер.Да
вайте посмотрим, как заставить сервер требовать от клиента сертификат.
 Для этого придётся лишь немного изменить его код:return Host.CreateDe
faultBuilder(args)     .UseSerilog()
    .ConfigureWebHostDefaults(webBuilder =>     {         webBuilder
            .UseKestrel(options =>             {                 optio
ns.Listen(System.Net.IPAddress.Loopback, 44321, listenOptions =>
                {                     var connectionOptions = new Http
sConnectionAdapterOptions();
                    connectionOptions.ServerCertificate = certificate;
                    connectionOptions.ClientCertificateMode = ClientCe
rtificateMode.RequireCertificate;                      connectionOptio
ns.ClientCertificateValidation = (certificate, chain, errors) =>
                    {                         if (errors != SslPolicyE
rrors.None) return false;
                        // Here is your code...
                        return true;                     };
                   listenOptions.UseHttps(connectionOptions);
                });             })             .UseStartup<Startup>();
    });Как видите, мы дополнительно установили всего лишь два свойства
 объекта HttpsConnectionAdapterOptions. Через свойство ClientCertifica
teMode мы указали, что клиентский сертификат требуется обязательно, а 
через свойство ClientCertificateValidation задали нашу функцию для доп
олнительной проверки сертификата.Если открыть такой сайт в браузере, о
н потребует от вас указать, какой клиентский сертификат ему использова
ть:Задание клиентского сертификата в браузереОсталось только узнать, к
ак нам задать клиентский сертификат для HttpClient. Получение сертифик
ата для клиента ничем не отличается от того, что мы использовали для с
ервера. Остальные же изменения в коде клиента минимальны:var handler =
 new HttpClientHandler() {     ServerCertificateCustomValidationCallba
ck = (request, certificate, chain, errors) => {
        if (errors != SslPolicyErrors.None) return false;
        // Here is your code...          return true;     } };
handler.ClientCertificates.Add(certificate);
var client = new HttpClient(handler) {
    BaseAddress = new Uri("https://localhost:44321") };Мы просто добав
или его в коллекцию ClientCertificates объекта HttpClientHandler.Заклю
чениеВот и подошла к концу наша статья. Она получилась довольно длинно
й. Я задумывал её как единое место, в котором я мог был в будущем осве
жить свои знания о сертификатах и их использовании, если что-то забуде
тся. Надеюсь, и вам она окажется полезной.ПриложениеВ своей работе я и
спользовал следующие материалы:Develop Locally with HTTPS, Self-Signed
 Certificates and ASP.NET CoreX.509 своими силами в .Net CoreВсе испол
ьзуемые иконки созданы Vitaly Gorbachev на сайте FlaticonИсходный код 
для статьи можно найти на GitHub.
