Автор: ilvar
Дата: 2021-10-04T10:29:45.000Z
Название: Сравнение эффективности поиска: Elasticsearch и конкуренты
Теги: Поисковые технологии *
Текст:
В области поисковых систем с открытым исходным кодом появилось
несколько новых интересных игроков. Мы решили внимательно изучить
некоторые из них, чтобы узнать, насколько они сравнимы с Elasticsearch
- как по набору функций, так и по
производительности.КандидатыElasticsearch - "взрослая" полнотекстовая
поисковая система, основанная на Lucene. RediSearch - полнотекстовый
поиск поверх Redis от RedisLabsPostgres FTS - полнотекстовые индексы
для PostgresTypeSense - альтернатива Algolia с открытым исходным
кодомMeiliSearch - альтернатива Algolia с открытым исходным
кодомФункциональное сравнениеФункцияElasticRediSearchPostgreSQLTypeSen
seMeiliSearchХранилищеДискRAM + снэпшотыДискRAM + снэпшотыRAM +
снэпшотыРаспределенная работаМастер-репликаRAFTМастер-
репликаRAFTНЕТРепликация+НЕТ+НЕТНЕТПоддерживаемые языкилатиница + cjk
+ кириллица + арабский + еще 10 латиница + арабский, русский,
китайскийлатиница + арабский, русскийс пробеламис пробелами +
кандзиИсправление опечатокда, но медленно+НЕТ++Бустинг++++НЕТТочный
поиск+++НЕТНЕТСинонимы+++++ Известные ограниченияElasticsearch:
Нестабильность, если в кластере больше ~1000 индексов (или 20 тыс.
шардов)  TypeSense: Размер хранилища ограничен доступной оперативной
памятью. ИсточникMeilisearch: Максимальное количество слов,
учитываемых для каждого поискового запроса - 10. Максимальный размер
базы данных - 100 ГБ (может быть изменен в конфиге). Максимум 200
индексов. Максимум 1000 слов в одном поле. Источник ТестНабор данных:
дамп выжимок из английской Википедии enwiki-20210720-abstract.xml
Дата: 20 июля 2021 г. Документов: 6,3 млн Размер XML: 6,0 ГБ  Слова
запроса выбираются случайным образом из 1000 самых распространенных
английских слов. Конфигурация системы2 General Purpose / 32 ГБ / 8
vCPU инстанса DigitalOcean (один для генерации нагрузки + один для
тестируемой системы). Полученные результатыВремя индексации Для
индексации мы учитывали только время, которое индексатор потратил на
запросы к серверу. Elasticsearch, PostgreSQL и Typesense показывают
здесь очень похожую производительность, в то время как RediSearch
примерно в 2 раза медленнее; этот результат странным образом
противоречит результатам тестов RedisLabs, поэтому настройка может
быть здесь неоптимальной. В то же время, Meilisearch блещет, будучи
почти в 7 раз быстрее остальных. Тайминги запросовОпять же, RediSearch
оказался в среднем довольно медленным, и снова RedisLabs получили
другие результаты. Еще один неожиданно медленный результат показал
запрос из трех слов в Typesense. Meilisearch показал довольно хорошую
производительность, особенно для запросов с префиксами и опечатками.
Мы использовали нули для отображения неподдерживаемых типов запросов
на графиках, но если приглядеться, видно, что RediSearch показал
результат менее 1 мс (!) для запросов «точная фраза» и «три слова И».
Результаты в числахТестElasticsearchRediSearchPostgreSQLTypeSenseMeili
SearchИндексирование- время26851629027242 (асинхр.)- пропускная
способность23644122672182723258150284Запрос: 1
слово16,1416,8169,8916,046,73Запрос: 3
слова4,070,952,61224,3611,57Запрос: 3 слова "ИЛИ"20,6945,862,48--
Запрос: точная фраза3,160,649,85--Запрос: 1 слово,
автокомплит7,7636,989,226,756,18Запрос с
опечаткой19,8158,17-14,615,84ВыводыElasticsearch по-прежнему остается
королем поиска, он выдает стабильную производительность и для
индексирования, и для всех типов запросов.     RediSearch имеет
посредственную производительность индексации; также RedisLabs изо всех
сил стараются продать свое облачное решение, поэтому документация не
на высоте. Но эта система показывает минимальную задержку (менее
миллисекунды) для некоторых типов запросов.     PostgreSQL показал
странную "яму" производительности для простых запросов из одного
слова, и интерфейс поиска довольно сложен. Хотя, если у вас уже есть
база данных Postgres, встроенный поиск может быть неплохим решением
для простых случаев.     У TypeSense неплохой набор функций, и
производительность в целом тоже на высоте, за исключением странного
провала при запросах из нескольких слов.     Кажущаяся высокая
производительность MeiliSearch была вызвана ориентацией теста только
на время ответа при индексировании, но Meili больше других полагается
на асинхронную обработку. Мы не смогли провести тест с ожиданием
индексации каждой порции данных, т.к. в таком режиме система оказалась
мучительно медленной.   Дополнение: результаты Meilisearch и Typesense
Джейсон Боско из Typesense обратился к нам по поводу странных
медленных выбросов с запросами из 3 слов и рекомендовал повторно
запустить этот тест с параметром drop_tokens_threshold = 1, но мы
получили в этом режиме похожие результаты (200+ мс). Мы также
попробовали drop_tokens_threshold = 0 (по сути, превратив запрос в
"ИЛИ"), это дало более высокую производительность.  То есть, по-
видимому, замедление вызвано тем, что мы выбираем 3 случайных
английских слова для запроса, и при отсутствии в индексе документов,
содержащих все три слова Typesense начинает отбрасывать слова, пока не
получает результат, и этот процесс не очень быстр.  Джейсон также
отметил, что кажущаяся быстрая индексация Meilisearch на самом деле
была вызвана асинхронностью запросов индексации. Мы обновили тест,
чтобы он дожидался завершения индексирования каждой порции, но в таком
режиме индексация занимает как-то невероятно много времени, так что,
видимо, нам нужно повнимательнее изучить, как Meilisearch работает под
капотом.Дополнение для Хабра :)Раз уж все скрипты были готовы, я в
свободное время погонял те же тесты для более экзотических
систем.SonicУжасно медленная индексация. Не дождался окончания теста,
хоть он и работал всю ночь.ToshiИндексация: 273 док/сек (настройки по
умолчанию), 37631 док/сек с использованием недокументированного
эндпоинта _bulk для пакетной работыЗапрос 1 слово: 372 з/сек, 2.68
мсЗапрос 3 слова: 357 з/сек, 2.79 мсЗапрос 3 слова с опечатками: 325
з/сек, 3.07 мсНеплохие в целом показатели, но для индексации
обязательно нужно использовать _bulk.QuickwitИндексация (из отдельно
подготовленного файла с ndjson): 37085 док/секЗапрос 1 слово: 324
з/сек, 3.08 мсЗапрос 3 слова: 324 з/сек, 3.08 мс ¯_(ツ)_/¯Неплохие
показатели, но для индексации нужно заранее готовить
данные.GroongaИндексация: 77372 док/секЗапрос 1 слово: 0.56 з/сек,
1782 мсЗапрос 3 слова: 0.50 з/сек, 1982 мсОчень быстрая индексация, но
ОЧЕНЬ медленный поиск.
