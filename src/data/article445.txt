–ê–≤—Ç–æ—Ä: trehleb
–î–∞—Ç–∞: 2021-09-30T05:01:12.000Z
–ù–∞–∑–≤–∞–Ω–∏–µ: –°–∞–º–æ–ø–∞—Ä–∫—É—é—â–∞—è—Å—è —Ç–∞—á–∫–∞ –≤ 500 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
–¢–µ–≥–∏: JavaScript *, –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ *, –ê–ª–≥–æ—Ä–∏—Ç–º—ã *, –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ *,
–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
–¢–µ–∫—Å—Ç:
–° –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞—Ç—Ä–µ–Ω–∏—Ä—É–µ–º —Ç–∞—á–∫—É –ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è
—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.–í–∫—Ä–∞—Ç—Ü–µ–í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã "–Ω–∞—É—á–∏–º" –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤—ã–ø–æ–ª–Ω—è—Ç—å
—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—É—é –ø–∞—Ä–∫–æ–≤–∫—É —Å –ø–æ–º–æ—â—å—é¬†–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.–í 1-–º
–ø–æ–∫–æ–ª–µ–Ω–∏–∏¬†–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –±—É–¥—É—Ç –∏–º–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≥–µ–Ω–æ–º –∏ –±—É–¥—É—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è
—Ö–∞–æ—Ç–∏—á–Ω–æ, –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Ç —Ç–∞–∫:–í ‚âà40-–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏¬†–∞–≤—Ç–æ–º–æ–±–∏–ª–∏
–ø–æ–Ω–µ–º–Ω–æ–≥—É –Ω–∞—á–Ω—É—Ç —É—á–∏—Ç—å—Å—è –ø–∞—Ä–∫–æ–≤–∫–µ –∏ –±—É–¥—É—Ç –≤—Å–µ –±–ª–∏–∂–µ –∏ –±–ª–∏–∂–µ
–ø–æ–¥–±–∏—Ä–∞—Ç—å—Å—è –∫ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–º—É –º–µ—Å—Ç—É,–ï—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º
—Å—Ç–∞—Ä—Ç–æ–≤—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º:–î–∞-–¥–∞, –º–∞—à–∏–Ω—ã –≤—Ä–µ–∑–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏–µ –º–∞—à–∏–Ω—ã –ø–æ –ø—É—Ç–∏,
–∏ –Ω–µ—Ç–æ—á–Ω–æ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ, –Ω–æ –¥–ª—è –Ω–∏—Ö —ç—Ç–æ –≤—Å–µ–≥–æ-–ª–∏—à—å
40-–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Ä–∞, —Ç–∞–∫ —á—Ç–æ –±—É–¥—å—Ç–µ —Å–Ω–∏—Å—Ö–æ–¥–∏—Ç–µ–ª—å–Ω—ã
–∏ –¥–∞–π—Ç–µ –º–∞—à–∏–Ω–∞–º –ø–æ–¥—Ä–∞—Å—Ç–∏ :D–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å üöï¬†—Å–∏–º—É–ª—è—Ç–æ—Ä —ç–≤–æ–ª—é—Ü–∏–∏,
—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –°–∏–º—É–ª—è—Ç–æ—Ä
–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:–í—ã –º–æ–∂–µ—Ç–µ¬†–Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–∞—à–∏–Ω
—Å –Ω—É–ª—è¬†–∏ –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–≤–æ–ª—é—Ü–∏–∏–í—ã –º–æ–∂–µ—Ç–µ¬†—É–≤–∏–¥–µ—Ç—å –∫–∞–∫ –ø–∞—Ä–∫—É—é—Ç—Å—è
—É–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ¬†–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞—Ç—å –∞–≤—Ç–æ
–≤—Ä—É—á–Ω—É—é–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–∞
TypeScript. –í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞,
–Ω–æ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –≤¬†—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
—Å–∏–º—É–ª—è—Ç–æ—Ä–∞.–ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–µ. –û–¥–Ω–∞–∫–æ —ç—Ç–∞
—Å—Ç–∞—Ç—å—è –∑–∞—Ç—Ä–æ–Ω–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏ –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –±—É–¥–µ—Ç
—è–≤–ª—è—Ç—å—Å—è –ø–æ–ª–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –∫ –Ω–µ–º—É.–° —É—á–µ—Ç–æ–º –≤—ã—à–µ—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º
–∫ –¥–µ—Ç–∞–ª—è–º...–ü–ª–∞–Ω–®–∞–≥ –∑–∞ —à–∞–≥–æ–º –º—ã —Å–≤–µ–¥–µ–º –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∑–∞–¥–∞—á—É —Å–æ–∑–¥–∞–Ω–∏—è
–∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ
–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ 180-–∏ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü (–∫ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—é
–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–æ–º–∞).–í–æ—Ç —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å:üí™üèª –î–∞–¥–∏–º
–º–∞—à–∏–Ω–µ¬†–º—ã—à—Ü—ã¬†(–¥–≤–∏–≥–∞—Ç–µ–ª—å, —Ä—É–ª—å), —á—Ç–æ–±—ã –æ–Ω–∞ –º–æ–≥–ª–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É
–ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞.üëÄ –î–∞–¥–∏–º –º–∞—à–∏–Ω–µ¬†–≥–ª–∞–∑–∞¬†(—Å–µ–Ω—Å–æ—Ä—ã), —á—Ç–æ–±—ã –º–∞—à–∏–Ω–∞ –º–æ–≥–ª–∞
–≤–∏–¥–µ—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤–æ–∫—Ä—É–≥.üß† –î–∞–¥–∏–º –º–∞—à–∏–Ω–µ¬†–º–æ–∑–≥, —á—Ç–æ–±—ã –º–∞—à–∏–Ω–∞ –º–æ–≥–ª–∞
–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –º—ã—à—Ü—ã (–¥–≤–∏–∂–µ–Ω–∏–µ) –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≥–æ, —á—Ç–æ –º–∞—à–∏–Ω–∞ –≤–∏–¥–∏—Ç
(–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ —Å–µ–Ω—Å–æ—Ä—ã). –ú–æ–∑–≥ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π¬†movements =
f(sensors).üß¨¬†–†–∞–∑–æ–≤—å–µ–º –º–æ–∑–≥, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
–¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–Ω—Å–æ—Ä–æ–≤. –ó–¥–µ—Å—å –º—ã –ø—Ä–∏–º–µ–Ω–∏–º
–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º. –ü–æ–∫–æ–ª–µ–Ω–∏–µ –∑–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∑–≥–∞¬†movements
= f(sensors)¬†–±—É–¥–µ—Ç —É—á–∏—Ç—å—Å—è –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å –∞–≤—Ç–æ –∫ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–º—É
–º–µ—Å—Ç—É.–î–∞–µ–º –º–∞—à–∏–Ω–µ –º—ã—à—Ü—ã–ß—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è, –º–∞—à–∏–Ω–µ –Ω—É–∂–Ω—ã ¬´–º—É—Å–∫—É–ª—ã¬ª. –î–∞–¥–∏–º
–º–∞—à–∏–Ω–µ –¥–≤–∞ —Ç–∏–ø–∞ –º—ã—à—Ü:–ú—ã—à—Ü–∞-–¥–≤–∏–≥–∞—Ç–µ–ª—å¬†- –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—à–∏–Ω–µ –¥–≤–∏–≥–∞—Ç—å—Å—è¬†‚Üì
–Ω–∞–∑–∞–¥,¬†‚Üë –≤–ø–µ—Ä–µ–¥¬†–∏–ª–∏¬†‚óé –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ¬†(–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞)–ú—ã—à—Ü–∞-
—Ä—É–ª—å¬†- –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—à–∏–Ω–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å¬†‚Üê –≤–ª–µ–≤–æ,¬†‚Üí –≤–ø—Ä–∞–≤–æ¬†–∏–ª–∏¬†‚óé –µ—Ö–∞—Ç—å
–ø—Ä—è–º–æ.–° –ø–æ–º–æ—â—å—é —ç—Ç–∏—Ö –¥–≤—É—Ö –º—ã—à—Ü –º–∞—à–∏–Ω–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ
–¥–≤–∏–∂–µ–Ω–∏—è:–í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –º—ã—à—Ü—ã —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–µ–º–Ω–∏–∫–∞–º–∏ —Å–∏–≥–Ω–∞–ª–æ–≤,
–ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –æ—Ç –º–æ–∑–≥–∞ –∫–∞–∂–¥—ã–µ 100 –º—Å (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥). –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
–∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –º–æ–∑–≥–∞ –º—ã—à—Ü—ã –¥–µ–π—Å—Ç–≤—É—é—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º
¬´–º–æ–∑–≥–æ–≤—É—é¬ª —á–∞—Å—Ç—å –Ω–∏–∂–µ, –∞ –ø–æ–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –Ω–∞—à –º–æ–∑–≥ –º–æ–∂–µ—Ç –ø–æ—Å—ã–ª–∞—Ç—å
—Ç–æ–ª—å–∫–æ 3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥–æ–π –º—ã—à—Ü–µ:¬†-1,¬†0¬†–∏–ª–∏¬†+1.type
MuscleSignal = -1 | 0 | 1;–ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∑–≥ –º–æ–∂–µ—Ç –ø–æ—Å–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª —Å–æ
–∑–Ω–∞—á–µ–Ω–∏–µ–º¬†+1¬†–≤ –º—ã—à—Ü—É –¥–≤–∏–≥–∞—Ç–µ–ª—è, –∏ –æ–Ω –Ω–∞—á–Ω–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥.
–°–∏–≥–Ω–∞–ª¬†-1¬†–¥–≤–∏–≥–∞—Ç–µ–ª—é –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –º–∞—à–∏–Ω—É –Ω–∞–∑–∞–¥. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –º–æ–∑–≥
–ø–æ—à–ª–µ—Ç —Å–∏–≥–Ω–∞–ª¬†-1¬†–≤ –º—ã—à—Ü—É —Ä—É–ª–µ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ–Ω –ø–æ–≤–µ—Ä–Ω–µ—Ç –º–∞—à–∏–Ω—É –≤–ª–µ–≤–æ
–∏ —Ç.–¥.–í–æ—Ç –∫–∞–∫ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–∑–≥–∞ —Å–æ–æ—Ç–Ω–æ—Å—è—Ç—Å—è —Å
–¥–µ–π—Å—Ç–≤–∏—è–º–∏ –º—ã—à—Ü:–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å¬†—Å–∏–º—É–ª—è—Ç–æ—Ä —ç–≤–æ–ª—é—Ü–∏–∏¬†–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è
–ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—É –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –º—É—Å–∫—É–ª—ã
–º–∞—à–∏–Ω—ã. –ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–ª–∞–≤–∏—à
–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã¬†WASD¬†(–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–∂–æ–π—Å—Ç–∏–∫), –≤—ã –ø–æ—Å—ã–ª–∞–µ—Ç–µ
—ç—Ç–∏¬†-1,¬†0¬†–∏–ª–∏¬†+1¬†—Å–∏–≥–Ω–∞–ª—ã –¥–≤–∏–≥–∞—Ç–µ–ª—é –∏ –º—ã—à—Ü–∞–º —Ä—É–ª–µ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.–î–∞–µ–º
–º–∞—à–∏–Ω–µ –≥–ª–∞–∑–∞–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—à–∞ –º–∞—à–∏–Ω–∞ –Ω–∞—É—á–∏—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
–ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –º—ã—à—Ü—ã, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ ¬´–≤–∏–¥–µ—Ç—å¬ª –æ–∫—Ä—É–∂–∞—é—â—É—é
—Å—Ä–µ–¥—É. –î–∞–¥–∏–º –º–∞—à–∏–Ω–µ¬†8¬†–≥–ª–∞–∑ –≤ –≤–∏–¥–µ –¥–∞—Ç—á–∏–∫–æ–≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:–ö–∞–∂–¥—ã–π –¥–∞—Ç—á–∏–∫
–º–æ–∂–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç¬†0¬†–¥–æ¬†4¬†–º–µ—Ç—Ä–æ–≤.–ö–∞–∂–¥—ã–π
–¥–∞—Ç—á–∏–∫ —Å–æ–æ–±—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω ¬´–≤–∏–¥–∏—Ç¬ª –≤
¬´–º–æ–∑–≥¬ª –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∫–∞–∂–¥—ã–µ¬†100 –º—Å.–ö–æ–≥–¥–∞ –¥–∞—Ç—á–∏–∫ –Ω–µ –≤–∏–¥–∏—Ç –Ω–∏–∫–∞–∫–∏—Ö
–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, –æ–Ω —Å–æ–æ–±—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ¬†0. –ï—Å–ª–∏ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞
–Ω–µ–±–æ–ª—å—à–æ–µ, –Ω–æ –Ω–µ –Ω—É–ª–µ–≤–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä,¬†0.01 –º), —ç—Ç–æ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ
–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –±–ª–∏–∑–∫–æ.–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è¬†—Å–∏–º—É–ª—è—Ç–æ—Ä–æ–º —ç–≤–æ–ª—é—Ü–∏–∏¬†–∏
–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è —Ü–≤–µ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ,
–Ω–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ.type Sensors = number[];–î–∞–µ–º
–º–∞—à–∏–Ω–µ –º–æ–∑–≥–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—à–∞ –º–∞—à–∏–Ω–∞ –º–æ–∂–µ—Ç ¬´–≤–∏–¥–µ—Ç—å¬ª –∏ ¬´–¥–≤–∏–≥–∞—Ç—å—Å—è¬ª,
–Ω–æ —É –Ω–µ–µ –Ω–µ—Ç ¬´–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞¬ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–ª –±—ã —Å–∏–≥–Ω–∞–ª—ã –æ—Ç
¬´–≥–ª–∞–∑¬ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è ¬´–º—É—Å–∫—É–ª–æ–≤¬ª. –ù–∞–º –Ω—É–∂–Ω–æ –¥–∞—Ç—å –º–∞—à–∏–Ω–µ
¬´–º–æ–∑–≥¬ª.–í—Ö–æ–¥—è—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã –º–æ–∑–≥–∞–í –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤
–º–æ–∑–≥ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å¬†8¬†—á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –∫–∞–∂–¥—ã–µ¬†100ms, –∫–∞–∂–¥–æ–µ
–∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ¬†[0...4]. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª –æ—Ç
—Å–µ–Ω—Å–æ—Ä–æ–≤ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:const sensors: Sensors = [s0, s1, s2, s3,
s4, s5, s6, s7]; // i.e. üß† ‚Üê [0, 0.5, 4, 0.002, 0, 3.76, 0,
1.245]–ò—Å—Ö–æ–¥—è—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã –º–æ–∑–≥–∞–ö–∞–∂–¥—ã–µ¬†100ms¬†–º–æ–∑–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞–≤–∞—Ç—å –Ω–∞
–≤—ã—Ö–æ–¥–µ –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞:–û–¥–Ω–æ —á–∏—Å–ª–æ - —Å–∏–≥–Ω–∞–ª –¥–ª—è
–¥–≤–∏–≥–∞—Ç–µ–ª—è¬†engineSignal–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ - —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ä—É–ª—è¬†wheelSignal–ö–∞–∂–¥–æ–µ
—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å —Ç–∏–ø¬†MuscleSignal¬†–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —Ç—Ä–µ—Ö
–∑–Ω–∞—á–µ–Ω–∏–π:¬†-1,¬†0, –∏–ª–∏¬†+1.–ú–æ–∑–≥–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è–£—á–∏—Ç—ã–≤–∞—è —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤—ã—à–µ
–≤—Ö–æ–¥—è—â–∏–π –∏ –∏—Å—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª—ã –º–æ–∑–≥–∞, –º—ã –º–æ–∂–µ–º —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º–æ–∑–≥ - —ç—Ç–æ
–ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è:const { engineSignal, wheelSignal } =
brainToMuscleSignal(   brainFunction(sensors) ); // i.e. {
engineSignal: 0, wheelSignal: -1 } ‚Üê üß† ‚Üê [0, 0.5, 4, 0.002, 0, 3.76,
0, 1.245]–ì–¥–µ¬†brainToMuscleSignal()¬†- —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
–∏—Å—Ö–æ–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –º–æ–∑–≥–∞ (–ª—é–±–æ–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π) –≤ —Å–∏–≥–Ω–∞–ª—ã
–º—ã—à—Ü (–≤ –æ–¥–Ω–æ –∏–∑ —á–∏—Å–µ–ª¬†-1,¬†0, –∏–ª–∏¬†+1), —á—Ç–æ–±—ã –º—ã—à—Ü—ã –º–æ–≥–ª–∏ —ç—Ç–æ –ø–æ–Ω—è—Ç—å. –ú—ã
—Ä–µ–∞–ª–∏–∑—É–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –Ω–∏–∂–µ.–¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∫–∞–∫–æ–π
–∏–º–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å¬†brainFunction()?–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º–∞—à–∏–Ω—É
"—É–º–Ω–µ–µ", –∞ –µ–µ –¥–≤–∏–∂–µ–Ω–∏—è - –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏, –º—ã –º–æ–≥–ª–∏ –±—ã
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å¬†–º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –ø–µ—Ä—Ü–µ–ø—Ç—Ä–æ–Ω. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–º–Ω–æ–≥–æ –ø—É–≥–∞—é—â–µ–µ, –Ω–æ
—ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —Å –±–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π (–≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –µ–µ
–∫–∞–∫ –±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤/–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤).–Ø –±–æ–ª–µ–µ
–¥–µ—Ç–∞–ª—å–Ω–æ –∫–æ—Å–Ω—É–ª—Å—è —Ç–µ–º—ã –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã—Ö –ø–µ—Ä—Ü–µ–ø—Ç—Ä–æ–Ω–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö¬†homemade-
machine-learning,¬†machine-learning-experiments¬†–∏¬†nano-neuron¬†projects.
–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —ç—Ç—É –ø—Ä–æ—Å—Ç—É—é –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å¬†—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
–Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ü–∏—Ñ—Ä—ã.–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è
—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≤ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ, –º—ã
–≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
–¥–≤–∞¬†–ª–∏–Ω–µ–π–Ω—ã—Ö –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞¬†—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (—á—Ç–æ–±—ã –±—ã—Ç—å –±–æ–ª–µ–µ
—Ç–æ—á–Ω—ã–º, –∫–∞–∂–¥—ã–π –º–Ω–æ–≥–æ—á–ª–µ–Ω –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ¬†8¬†–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –ø–æ—Å–∫–æ–ª—å–∫—É —É
–Ω–∞—Å –µ—Å—Ç—å¬†8¬†–¥–∞—Ç—á–∏–∫–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ
—Ç–∞–∫:engineSignal = brainToMuscleSignal(   (e0 * s0) + (e1 * s1) + ...
+ (e7 * s7) + e8 // <- brainFunction )  wheelSignal =
brainToMuscleSignal(   (w0 * s0) + (w1 * s1) + ... + (w7 * s7) + w8 //
<- brainFunction )–ì–¥–µ:[s0, s1, ..., s7]¬†-¬†8¬†–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ
—è–≤–ª—è—é—Ç—Å—è¬†8¬†–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–∞—Ç—á–∏–∫–æ–≤. –û–Ω–∏ –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏.[e0, e1,
..., e8]¬†-¬†9¬†–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª–∏–Ω–æ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è. –≠—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
–∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –æ—Ç—ã—Å–∫–∞—Ç—å/–≤—ã—É—á–∏—Ç—å. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –æ–Ω–∏
–±—É–¥—É—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏.[w0, w1, ..., w8]¬†-¬†9¬†–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª–∏–Ω–æ–º–∞ —Ä—É–ª–µ–≤–æ–≥–æ
—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –≠—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –æ—Ç—ã—Å–∫–∞—Ç—å/–≤—ã—É—á–∏—Ç—å.
–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –æ–Ω–∏ –±—É–¥—É—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏.–¶–µ–Ω–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
–±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–∑–≥–∞ —Å—Ç–∞–Ω–µ—Ç —Ç–æ, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç
–Ω–∞—É—á–∏—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–ª–æ–∂–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏—è–º, –∞ —Ç–∞–∫–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç —Ö–æ—Ä–æ—à–æ
–æ–±–æ–±—â–∞—Ç—å –∏ —Ö–æ—Ä–æ—à–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é. –ù–æ –¥–ª—è
–Ω–∞—à–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ—è–Ω–∫–∏ –∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ
–∞–ª–≥–æ—Ä–∏—Ç–º–∞ —ç—Ç–æ–≥–æ –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∏—Ç—å.–ú—ã –º–æ–∂–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é
–ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:type Coefficients = number[];
// Calculates the value of a linear polynomial based on the
coefficients and variables. const linearPolynomial = (coefficients:
Coefficients, variables: number[]): number => {   if
(coefficients.length !== (variables.length + 1)) {     throw new
Error('Incompatible number of polynomial coefficients and variables');
}   let result = 0;   coefficients.forEach((coefficient: number,
coefficientIndex: number) => {     if (coefficientIndex <
variables.length) {       result += coefficient *
variables[coefficientIndex];     } else {       // The last
coefficient needs to be added up without multiplication.       result
+= coefficient     }   });   return result; };–ú–æ–∑–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —ç—Ç–æ–º
—Å–ª—É—á–∞–µ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤ –∏ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:const
engineSignal: MuscleSignal = brainToMuscleSignal(
linearPolynomial(engineCoefficients, sensors) ); const wheelSignal:
MuscleSignal = brainToMuscleSignal(
linearPolynomial(wheelCoefficients, sensors) );–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
—Ñ—É–Ω–∫—Ü–∏–∏¬†linearPolynomial()¬†—è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π.
–§—É–Ω–∫—Ü–∏—è¬†brainToMuscleSignal()¬†–¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
—á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –≤ —Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞, –∏ –æ–Ω–∞ —Å–¥–µ–ª–∞–µ—Ç
—ç—Ç–æ –≤ –¥–≤–∞ —ç—Ç–∞–ø–∞:–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π —à–∏—Ä–æ–∫–æ–≥–æ
–¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä,¬†0.456¬†–∏–ª–∏¬†3673.45¬†–∏–ª–∏¬†-280) –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π
—Ç–æ—á–∫–æ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ
–¥–∏–∞–ø–∞–∑–æ–Ω–∞¬†(0...1)¬†(–Ω–∞–ø—Ä–∏–º–µ—Ä,¬†0.05¬†–∏–ª–∏¬†0.86)–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —á–∏—Å–ª–æ —Å
–ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ¬†(0...1)¬†–≤ –æ–¥–Ω–æ –∏–∑ —Ç—Ä–µ—Ö —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö
–∑–Ω–∞—á–µ–Ω–∏–π¬†-1,¬†0, –∏–ª–∏¬†+1. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π, –±–ª–∏–∑–∫–∏–µ
–∫¬†0, –±—É–¥—É—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤¬†-1, —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π, –±–ª–∏–∑–∫–∏–µ
–∫¬†0.5, –±—É–¥—É—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤¬†0, –∞ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π, –±–ª–∏–∑–∫–∏–µ
–∫¬†+1, –±—É–¥—É—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤¬†+1.–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –Ω–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏¬†—Å–∏–≥–º–æ–∏–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç
—Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ä–º—É–ª—É:–°–∏–≥–º–æ–∏–¥ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª —Å
–ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π (–æ—Å—å¬†x) –≤ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º
–¥–∏–∞–ø–∞–∑–æ–Ω–æ–º¬†(0...1)¬†(–æ—Å—å¬†y). –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ.–í–æ—Ç –∫–∞–∫ —à–∞–≥–∏
–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ —Å–∏–≥–º–æ–∏–¥—ã.–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤—É—Ö
—É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤—ã—à–µ —à–∞–≥–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:// Calculates
the sigmoid value for a given number. const sigmoid = (x: number):
number => {   return 1 / (1 + Math.E ** -x); }; // Converts sigmoid
value (0...1) to the muscle signals (-1, 0, +1) // The margin
parameter is a value between 0 and 0.5: // [0 ... (0.5 - margin) ...
0.5 ... (0.5 + margin) ... 1] const sigmoidToMuscleSignal =
(sigmoidValue: number, margin: number = 0.4): MuscleSignal => {   if
(sigmoidValue < (0.5 - margin)) {     return -1;   }   if
(sigmoidValue > (0.5 + margin)) {     return 1;   }   return 0; }; //
Converts raw brain signal to the muscle signal. const
brainToMuscleSignal = (rawBrainSignal: number): MuscleSignal => {
const normalizedBrainSignal = sigmoid(rawBrainSignal);   return
sigmoidToMuscleSignal(normalizedBrainSignal); }–ì–µ–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è
(–î–ù–ö)‚òùüèª –ì–ª–∞–≤–Ω—ã–π –≤—ã–≤–æ–¥ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ ¬´–ì–ª–∞–∑–∞¬ª, ¬´–ú—ã—à—Ü—ã¬ª –∏ ¬´–ú–æ–∑–≥¬ª –≤—ã—à–µ
–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–π - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã¬†[e0, e1, ..., e8]¬†–∏¬†[w0, w1, ...,
w8]¬†–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã. –≠—Ç–∏¬†18¬†—á–∏—Å–µ–ª –≤–º–µ—Å—Ç–µ –æ–±—Ä–∞–∑—É—é—Ç
—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∏–ª–∏ –î–ù–ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è).–ì–µ–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤
–¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ–°–æ–µ–¥–∏–Ω–∏–º –≤–º–µ—Å—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–∑–≥–∞¬†[e0, e1, ...,
e8]¬†–∏¬†[w0, w1, ..., w8], —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤
–¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ:// Car genome as a list of decimal numbers
(coefficients). const carGenomeBase10 = [e0, e1, ..., e8, w0, w1, ...,
w8]; // i.e. carGenomeBase10 = [17.5, 0.059, -46, 25, 156, -0.085,
-0.207, -0.546, 0.071, -58, 41, 0.011, 252, -3.5, -0.017, 1.532, -360,
0.157]–ì–µ–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –¥–≤–æ–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ–î–∞–≤–∞–π—Ç–µ –ø–æ–π–¥–µ–º –Ω–∞ —à–∞–≥ –≥–ª—É–±–∂–µ
(–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≥–µ–Ω–æ–≤) –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ –≥–µ–Ω–æ–º–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤
–¥–≤–æ–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–≤ –ø—Ä–æ—Å—Ç—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ –Ω—É–ª–∏).–Ø –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–ª –ø—Ä–æ—Ü–µ—Å—Å
–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –≤ –¥–≤–æ–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ –≤
—Å—Ç–∞—Ç—å–µ¬†Binary representation of the floating-point numbers. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å
–∫ –Ω–µ–π, –µ—Å–ª–∏ –∫–æ–¥ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω.–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫
—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ
–≤¬†16-–±–∏—Ç–Ω–æ–µ¬†–¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (–æ–ø—è—Ç—å –∂–µ, –º–æ–∂–µ—Ç–µ¬†–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ,
–µ—Å–ª–∏ –ø—Ä–∏–º–µ—Ä –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω):–í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –¥–ª–∏–Ω—É –≥–µ–Ω–æ–º–∞,
–º—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞–≤–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤
–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ¬†10-–±–∏—Ç–Ω–æ–µ¬†–¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (1¬†–∑–Ω–∞–∫–æ–≤—ã–π –±–∏—Ç,¬†4¬†–±–∏—Ç–∞
—ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã,¬†5¬†–¥—Ä–æ–±–Ω—ã—Ö –±–∏—Ç–æ–≤).–í—Å–µ–≥–æ —É –Ω–∞—Å¬†18¬†–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π
–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤¬†10-–±–∏—Ç–Ω–æ–µ¬†—á–∏—Å–ª–æ. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ
–≥–µ–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü
–¥–ª–∏–Ω–æ–π¬†18 * 10 = 180 –±–∏—Ç.–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≥–µ–Ω–æ–º–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –æ
–∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä–∏–ª–æ—Å—å –≤—ã—à–µ, –µ–≥–æ –¥–≤–æ–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å
—Ç–∞–∫:type Gene = 0 | 1; type Genome = Gene[]; const genome: Genome = [
// Engine coefficients.   0, 1, 0, 1, 1, 0, 0, 0, 1, 1, // <- 17.5
0, 0, 0, 1, 0, 1, 1, 1, 0, 0, // <- 0.059   1, 1, 1, 0, 0, 0, 1, 1, 1,
0, // <- -46   0, 1, 0, 1, 1, 1, 0, 0, 1, 0, // <- 25   0, 1, 1, 1, 0,
0, 0, 1, 1, 1, // <- 156   1, 0, 0, 1, 1, 0, 1, 1, 0, 0, // <- -0.085
1, 0, 1, 0, 0, 1, 0, 1, 0, 1, // <- -0.207   1, 0, 1, 1, 0, 0, 0, 0,
1, 1, // <- -0.546   0, 0, 0, 1, 1, 0, 0, 1, 0, 0, // <- 0.071   //
Wheels coefficients.   1, 1, 1, 0, 0, 1, 1, 0, 1, 0, // <- -58   0, 1,
1, 0, 0, 0, 1, 0, 0, 1, // <- 41   0, 0, 0, 0, 0, 0, 1, 0, 1, 0, // <-
0.011   0, 1, 1, 1, 0, 1, 1, 1, 1, 1, // <- 252   1, 1, 0, 0, 0, 1, 1,
0, 0, 0, // <- -3.5   1, 0, 0, 0, 1, 0, 0, 1, 0, 0, // <- -0.017   0,
0, 1, 1, 1, 1, 0, 0, 0, 1, // <- 1.532   1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
// <- -360   0, 0, 1, 0, 0, 0, 1, 0, 0, 0, // <- 0.157 ];–¢–æ–ª—å–∫–æ
–≤–∑–≥–ª—è–Ω–∏—Ç–µ! –ë–∏–Ω–∞—Ä–Ω—ã–π –≥–µ–Ω–æ–º –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ–≤–æ–ª—å–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º. –ù–æ
–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ, —á—Ç–æ —ç—Ç–∏¬†180¬†–Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫
–∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤–µ–¥–µ—Ç —Å–µ–±—è –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ! –≠—Ç–æ –∫–∞–∫ –µ—Å–ª–∏ –±—ã –≤—ã –≤–∑–ª–æ–º–∞–ª–∏ —á—å—é-—Ç–æ
–î–ù–ö –∏ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–∞–∂–¥—ã–π –≥–µ–Ω. –°–∏–ª—å–Ω–æ!–ö—Å—Ç–∞—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ
—É–≤–∏–¥–µ—Ç—å —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–µ–Ω–æ–º–æ–≤ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ "—É–º–Ω–æ–≥–æ"
–∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ø–∞–Ω–µ–ª–∏¬†—Å–∏–º—É–ª—è—Ç–æ—Ä–∞–í–æ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç
–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –¥–≤–æ–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª —Å
–ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π (–º–æ–∑–≥—É –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–æ–º–∞ –∏
—Å–æ–∑–¥–∞–Ω–∏—è –º—ã—à–µ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–æ–º–∞):type Bit = 0 | 1;
type Bits = Bit[]; type PrecisionConfig = {   signBitsCount: number,
exponentBitsCount: number,   fractionBitsCount: number,
totalBitsCount: number, }; type PrecisionConfigs = {   custom:
PrecisionConfig, }; const precisionConfigs: PrecisionConfigs = {   //
Custom-made 10-bits precision for faster evolution progress.   custom:
{     signBitsCount: 1,     exponentBitsCount: 4,
fractionBitsCount: 5,     totalBitsCount: 10,   }, }; // Converts the
binary representation of the floating-point number to decimal float
number. function bitsToFloat(bits: Bits, precisionConfig:
PrecisionConfig): number {   const { signBitsCount, exponentBitsCount
} = precisionConfig;   // Figuring out the sign.   const sign = (-1)
** bits[0]; // -1^1 = -1, -1^0 = 1   // Calculating the exponent
value.   const exponentBias = 2 ** (exponentBitsCount - 1) - 1;
const exponentBits = bits.slice(signBitsCount, signBitsCount +
exponentBitsCount);   const exponentUnbiased = exponentBits.reduce(
(exponentSoFar: number, currentBit: Bit, bitIndex: number) => {
const bitPowerOfTwo = 2 ** (exponentBitsCount - bitIndex - 1);
return exponentSoFar + currentBit * bitPowerOfTwo;     },     0,   );
const exponent = exponentUnbiased - exponentBias;   // Calculating the
fraction value.   const fractionBits = bits.slice(signBitsCount +
exponentBitsCount);   const fraction = fractionBits.reduce(
(fractionSoFar: number, currentBit: Bit, bitIndex: number) => {
const bitPowerOfTwo = 2 ** -(bitIndex + 1);       return fractionSoFar
+ currentBit * bitPowerOfTwo;     },     0,   );   // Putting all
parts together to calculate the final number.   return sign * (2 **
exponent) * (1 + fraction); } // Converts the 8-bit binary
representation of the floating-point number to decimal float number.
function bitsToFloat10(bits: Bits): number {   return
bitsToFloat(bits, precisionConfigs.custom); }–ú–æ–∑–≥–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è,
—Ä–∞–±–æ—Ç–∞—é—â–∞—è —Å –±–∏–Ω–∞—Ä–Ω—ã–º –≥–µ–Ω–æ–º–æ–º–†–∞–Ω—å—à–µ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—à–µ–≥–æ –º–æ–∑–≥–∞ –Ω–∞–ø—Ä—è–º—É—é
—Ä–∞–±–æ—Ç–∞–ª–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ñ–æ—Ä–º–æ–π –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã—Ö
–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤¬†engineCoefficients¬†–∏¬†wheelCoefficients. –û–¥–Ω–∞–∫–æ —Ç–µ–ø–µ—Ä—å
—ç—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–¥–∏—Ä—É—é—Ç—Å—è –≤ –¥–≤–æ–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ –≥–µ–Ω–æ–º–∞. –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º
—Ñ—É–Ω–∫—Ü–∏—é¬†decodeGenome(), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑
–≥–µ–Ω–æ–º–∞, –∏ –ø–µ—Ä–µ–ø–∏—à–µ–º –º–æ–∑–≥–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:// Car has 16
distance sensors. const CAR_SENSORS_NUM = 8; // Additional formula
coefficient that is not connected to a sensor. const BIAS_UNITS = 1;
// How many genes do we need to encode each numeric parameter for the
formulas. const GENES_PER_NUMBER =
precisionConfigs.custom.totalBitsCount; // Based on 8 distance sensors
we need to provide two formulas that would define car's behavior: //
1. Engine formula (input: 8 sensors; output: -1 (backward), 0
(neutral), +1 (forward)) // 2. Wheels formula (input: 8 sensors;
output: -1 (left), 0 (straight), +1 (right)) const
ENGINE_FORMULA_GENES_NUM = (CAR_SENSORS_NUM + BIAS_UNITS) *
GENES_PER_NUMBER; const WHEELS_FORMULA_GENES_NUM = (CAR_SENSORS_NUM +
BIAS_UNITS) * GENES_PER_NUMBER; // The length of the binary genome of
the car. const GENOME_LENGTH = ENGINE_FORMULA_GENES_NUM +
WHEELS_FORMULA_GENES_NUM; type DecodedGenome = {
engineFormulaCoefficients: Coefficients,   wheelsFormulaCoefficients:
Coefficients, } // Converts the genome from a binary form to the
decimal form. const genomeToNumbers = (genome: Genome, genesPerNumber:
number): number[] => {   if (genome.length % genesPerNumber !== 0) {
throw new Error('Wrong number of genes in the numbers genome');   }
const numbers: number[] = [];   for (let numberIndex = 0; numberIndex
< genome.length; numberIndex += genesPerNumber) {     const number:
number = bitsToFloat10(genome.slice(numberIndex, numberIndex +
genesPerNumber));     numbers.push(number);   }   return numbers; };
// Converts the genome from a binary form to the decimal form // and
splits the genome into two sets of coefficients (one set for each
muscle). const decodeGenome = (genome: Genome): DecodedGenome => {
const engineGenes: Gene[] = genome.slice(0, ENGINE_FORMULA_GENES_NUM);
const wheelsGenes: Gene[] = genome.slice(
ENGINE_FORMULA_GENES_NUM,     ENGINE_FORMULA_GENES_NUM +
WHEELS_FORMULA_GENES_NUM,   );   const engineFormulaCoefficients:
Coefficients = genomeToNumbers(engineGenes, GENES_PER_NUMBER);   const
wheelsFormulaCoefficients: Coefficients = genomeToNumbers(wheelsGenes,
GENES_PER_NUMBER);   return {     engineFormulaCoefficients,
wheelsFormulaCoefficients,   }; }; // Update brain function for the
engine muscle. export const getEngineMuscleSignal = (genome: Genome,
sensors: Sensors): MuscleSignal => {   const
{engineFormulaCoefficients: coefficients} = decodeGenome(genome);
const rawBrainSignal = linearPolynomial(coefficients, sensors);
return brainToMuscleSignal(rawBrainSignal); }; // Update brain
function for the wheels muscle. export const getWheelsMuscleSignal =
(genome: Genome, sensors: Sensors): MuscleSignal => {   const
{wheelsFormulaCoefficients: coefficients} = decodeGenome(genome);
const rawBrainSignal = linearPolynomial(coefficients, sensors);
return brainToMuscleSignal(rawBrainSignal); };–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
–æ–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è‚òùüèª –ò—Ç–∞–∫, –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ, –º—ã –ø–æ–¥–æ—à–ª–∏ –∫ –º–æ–º–µ–Ω—Ç—É, –∫–æ–≥–¥–∞
–≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–µ
—Å–≤–æ–¥–∏—Ç—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π
–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏¬†180¬†–µ–¥–∏–Ω–∏—Ü –∏ –Ω—É–ª–µ–π (–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–µ–≥–æ" –≥–µ–Ω–æ–º–∞
–º–∞—à–∏–Ω—ã). –ó–≤—É—á–∏—Ç –ø—Ä–æ—Å—Ç–æ, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏?–ù–∞–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥–ú—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–¥–æ–π—Ç–∏
–∫ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–∏—Å–∫–∞ ¬´–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–µ–≥–æ¬ª –≥–µ–Ω–æ–º–∞ –Ω–∞–∏–≤–Ω–æ –∏ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ
–≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–µ–Ω–æ–≤:[0, ..., 0, 0], –∞ –∑–∞—Ç–µ–º ...[0, ..., 0, 1],
–∞ –∑–∞—Ç–µ–º ...[0, ..., 1, 0], –∞ –∑–∞—Ç–µ–º ...[0, ..., 1, 1], –∞ –∑–∞—Ç–µ–º ......–ù–æ
–¥–∞–≤–∞–π—Ç–µ –ø–æ–¥—Å—á–∏—Ç–∞–µ–º. –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å¬†180¬†–±–∏—Ç –∏ –∫–∞–∂–¥—ã–π –±–∏—Ç —Ä–∞–≤–µ–Ω
–ª–∏–±–æ¬†0¬†–ª–∏–±–æ¬†1, —É –Ω–∞—Å –±—É–¥–µ—Ç¬†2^180¬†(–∏–ª–∏¬†1.53 * 10^54) –≤–æ–∑–º–æ–∂–Ω—ã—Ö
–∫–æ–º–±–∏–Ω–∞—Ü–∏–π. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –Ω–∞–º –Ω—É–∂–Ω–æ –¥–∞—Ç—å¬†15¬†—Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—É—é –º–∞—à–∏–Ω—É,
—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —É—Å–ø–µ—à–Ω–æ –æ–Ω–∞ –ø—Ä–∏–ø–∞—Ä–∫—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ—Ç. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º —Ç–∞–∫–∂–µ, —á—Ç–æ
–º—ã –º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è¬†10¬†–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –¢–æ–≥–¥–∞
–Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è¬†15 * (1.53 * 10^54) / 10 = 2.29 * 10^54 [—Å–µ–∫—É–Ω–¥], —á—Ç–æ
—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç¬†7.36 * 10^46 [–ª–µ—Ç]. –î–æ–≤–æ–ª—å–Ω–æ –¥–æ–ª–≥–æ–µ –ø—Ä–∏–¥–µ—Ç—Å—è –∂–¥–∞—Ç—å. –¢–æ–ª—å–∫–æ
—Å—Ä–∞–≤–Ω–∏—Ç–µ, —á—Ç–æ —Å–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ò–∏—Å—É—Å–∞ –•—Ä–∏—Å—Ç–∞ –ø—Ä–æ—à–ª–æ —Ç–æ–ª—å–∫–æ¬†2.021 * 10^3
[–ª–µ—Ç].–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥–ù–∞–º –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏
–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ–Ω–æ–º–∞. –ó–¥–µ—Å—å –Ω–∞ –ø–æ–º–æ—â—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π
–∞–ª–≥–æ—Ä–∏—Ç–º. –í–æ–∑–º–æ–∂–Ω–æ, –º—ã –∏ –Ω–µ –Ω–∞–π–¥–µ–º –Ω–∞–∏–ª—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–µ–Ω–æ–º–∞, –Ω–æ –µ—Å—Ç—å
—à–∞–Ω—Å, —á—Ç–æ –º—ã —Å–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò, —á—Ç–æ –±–æ–ª–µ–µ –≤–∞–∂–Ω–æ,
–Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ —Ç–∞–∫ –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å. –° –ø–æ–º–æ—â—å—é¬†—Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —ç–≤–æ–ª—é—Ü–∏–∏¬†—è —Å–º–æ–≥
–Ω–∞–π—Ç–∏ –¥–æ–≤–æ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–∏–π –≥–µ–Ω–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ¬†24 [—á–∞—Å–æ–≤].–û—Å–Ω–æ–≤—ã –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ
–∞–ª–≥–æ—Ä–∏—Ç–º–∞–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã¬†–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
–æ—Ç–±–æ—Ä–∞, –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –û–Ω–∏
–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –Ω–∞ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä, –º—É—Ç–∞—Ü–∏—è –∏
–æ—Ç–±–æ—Ä.–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–∏—Å–∫–∞ ¬´–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–µ–π¬ª –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≥–µ–Ω–æ–≤ –¥–ª—è
–∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —Ç–∞–∫ —á—Ç–æ –µ—Å—Ç—å –±–æ–ª—å—à–∞—è
–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –≤ —ç—Ç–æ–º.–ú—ã –Ω–µ –±—É–¥–µ–º
–ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º, –Ω–æ –≤ —Ü–µ–ª–æ–º –≤–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ
—à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å:–°–û–ó–î–ê–ù–ò–ï¬†- —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ
–ø–æ–∫–æ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π¬†–Ω–µ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –∏–∑ –Ω–∏—á–µ–≥–æ, –ø–æ—ç—Ç–æ–º—É –º—ã
–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–µ–Ω–æ–º–æ–≤ (–Ω–∞–±–æ—Ä –¥–≤–æ–∏—á–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
–¥–ª–∏–Ω–æ–π¬†180). –ù–∞–ø—Ä–∏–º–µ—Ä, –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å¬†1000¬†–º–∞—à–∏–Ω. –ß–µ–º –±–æ–ª—å—à–µ
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω (–Ω–∞—Å–µ–ª–µ–Ω–∏–µ), —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
(–∏ –Ω–∞–π—Ç–∏ –µ–≥–æ –±—ã—Å—Ç—Ä–µ–µ).–°–ï–õ–ï–ö–¶–ò–Ø¬†- –Ω–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ
–ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω—ã—Ö –æ—Å–æ–±–µ–π –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ
—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è (—Å–º. —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥). –ü—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É—É–º–∞ –±—É–¥–µ—Ç
–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ
–ø–æ–∫–∞–∂–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∏–±–ª–∏–∑–∏–ª—Å—è –∫ —Ü–µ–ª–µ–≤–æ–º—É –º–µ—Å—Ç—É
–ø–∞—Ä–∫–æ–≤–∫–∏. –ß–µ–º –±–ª–∏–∂–µ –º–∞—à–∏–Ω–∞ –∫ –º–µ—Å—Ç—É –ø–∞—Ä–∫–æ–≤–∫–∏, —Ç–µ–º –æ–Ω–∞
"–ª—É—á—à–µ".–°–ü–ê–†–ò–í–ê–ù–ò–ï¬†- –ø–æ–ø—Ä–æ—Å—Ç—É –≥–æ–≤–æ—Ä—è, –º—ã –ø–æ–∑–≤–æ–ª–∏–º –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º ¬´‚ôÇ –æ—Ç—Ü–∞–º-
–∞–≤—Ç–æ–º–æ–±–∏–ª—è–º¬ª ¬´–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–µ–∫—Å–æ–º¬ª —Å –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ ¬´‚ôÄ –º–∞—Ç–µ—Ä—è–º–∏-
–∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏¬ª, —á—Ç–æ–±—ã –∏—Ö –≥–µ–Ω–æ–º—ã –º–æ–≥–ª–∏ —Å–º–µ—à–∏–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏¬†50/50¬†–∏
–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å ¬´‚ôÇ‚ôÄ –¥–µ—Ç–µ–π-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π¬ª. –ò–¥–µ—è —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ
"—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ" –¥–µ—Ç–∏-–∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –ª—É—á—à–µ (–∏–ª–∏ —Ö—É–∂–µ) –≤ –ø–∞—Ä–∫–æ–≤–∫–µ,
–µ—Å–ª–∏ —É–Ω–∞—Å–ª–µ–¥—É—é—Ç –ª—É—á—à–µ–µ (–∏–ª–∏ —Ö—É–¥—à–µ–µ) —É —Ä–æ–¥–∏—Ç–µ–ª–µ–π.–ú–£–¢–ê–¶–ò–Ø¬†- –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω—ã –º–æ–≥—É—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å (–µ–¥–∏–Ω–∏—Ü—ã
–∏ –Ω—É–ª–∏ –≤ –≥–µ–Ω–æ–º–µ —Ä–µ–±–µ–Ω–∫–∞ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è). –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–æ–ª–µ–µ
—à–∏—Ä–æ–∫–æ–º—É —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é –≥–µ–Ω–æ–º–æ–≤ –¥–µ—Ç–µ–π –∏, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∫ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–º—É
—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–µ—Ç–µ–π-–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ 1-–π –±–∏—Ç –±—ã–ª
—Å–ª—É—á–∞–π–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤¬†0¬†–¥–ª—è –≤—Å–µ—Ö¬†~1000¬†–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π
—Å–ø–æ—Å–æ–± –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—É —Å 1-–º –±–∏—Ç–æ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤¬†1, - —ç—Ç–æ
—Å–ª—É—á–∞–π–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è —Å–∏–ª—å–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–∑—Ä—É—à–∏—Ç—å
–∑–¥–æ—Ä–æ–≤—ã–µ –≥–µ–Ω–æ–º—ã.–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ¬´–®–∞–≥—É ‚Ññ2¬ª, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π –Ω–µ
–¥–æ—Å—Ç–∏–≥–ª–æ –ø—Ä–µ–¥–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –ø—Ä–æ—à–ª–æ¬†100¬†–ø–æ–∫–æ–ª–µ–Ω–∏–π) –∏–ª–∏ –ø–æ–∫–∞ —Å–∞–º—ã–µ
—É—Å–ø–µ—à–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É—É–º—ã –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ª—É—á—à–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –µ—â–µ –Ω–µ –ø—Ä–∏–±–ª–∏–∑–∏–ª—Å—è –∫
–º–µ—Å—Ç—É —Å—Ç–æ—è–Ω–∫–∏ –±–ª–∏–∂–µ, —á–µ–º –Ω–∞¬†1 –º–µ—Ç—Ä). –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑
—Ü–∏–∫–ª–∞.–†–∞–∑–≤–∏—Ç–∏–µ –º–æ–∑–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–ü–µ—Ä–µ–¥
–∑–∞–ø—É—Å–∫–æ–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤
¬´–°–û–ó–î–ê–ù–ò–Ø¬ª, ¬´–°–ï–õ–ï–ö–¶–ò–ò¬ª, ¬´–°–ü–ê–†–ò–í–ê–ù–ò–Ø¬ª –∏ ¬´–ú–£–¢–ê–¶–ò–ò¬ª.–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–≥–∞
¬´–°–û–ó–î–ê–ù–ò–ï¬ª–§—É–Ω–∫—Ü–∏—è¬†createGeneration()¬†—Å–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–µ–Ω–æ–º–æ–≤
( –ø–æ–ø—É–ª—è—Ü–∏—é –∏–ª–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–µ) –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:generationSize¬†-
–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è. –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º –≤
—Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.genomeLength¬†- –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω—É
–≥–µ–Ω–æ–º–∞ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É—É–º–∞ –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ
–¥–ª–∏–Ω–∞ –≥–µ–Ω–æ–º–∞ –±—É–¥–µ—Ç¬†180.–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∫–∞–∂–¥—ã–π –≥–µ–Ω –≥–µ–Ω–æ–º–∞ –±—É–¥–µ—Ç
—Ä–∞–≤–µ–Ω¬†0¬†–∏–ª–∏¬†1, —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç¬†50/50.type Generation = Genome[]; type
GenerationParams = {   generationSize: number,   genomeLength: number,
}; function createGenome(length: number): Genome {   return new
Array(length)     .fill(null)     .map(() => (Math.random() < 0.5 ? 0
: 1)); } function createGeneration(params: GenerationParams):
Generation {   const { generationSize, genomeLength } = params;
return new Array(generationSize)     .fill(null)     .map(() =>
createGenome(genomeLength)); }–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–≥–∞
¬´–ú–£–¢–ê–¶–ò–Ø¬ª–§—É–Ω–∫—Ü–∏—è¬†mutate()¬†–±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º
–æ–±—Ä–∞–∑–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è¬†mutationProbability.–ù–∞–ø—Ä–∏–º–µ—Ä,
–µ—Å–ª–∏¬†mutationProbability = 0.1, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –≥–µ–Ω–æ–º–∞
—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç¬†10%¬†. –°–∫–∞–∂–µ–º, –µ—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª –≥–µ–Ω–æ–º –¥–ª–∏–Ω–æ–π¬†10¬†–≥–µ–Ω–æ–≤,
–∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–µ–ª –±—ã –∫–∞–∫¬†[0, 0, 0, 0, 0, 0 ,0 ,0 ,0 ,0], —Ç–æ –ø–æ—Å–ª–µ
–º—É—Ç–∞—Ü–∏–∏ –±—É–¥–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ 1 –≥–µ–Ω –±—É–¥–µ—Ç –±—ã—Ç—å –º—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –∏ –º—ã
–º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–µ–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫¬†[0, 0, 0, 1, 0, 0 ,0
,0 ,0 ,0].// The number between 0 and 1. type Probability = number; //
@see: https://en.wikipedia.org/wiki/Mutation_(genetic_algorithm)
function mutate(genome: Genome, mutationProbability: Probability):
Genome {   for (let geneIndex = 0; geneIndex < genome.length;
geneIndex += 1) {     const gene: Gene = genome[geneIndex];     const
mutatedGene: Gene = gene === 0 ? 1 : 0;     genome[geneIndex] =
Math.random() < mutationProbability ? mutatedGene : gene;   }   return
genome; }–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–≥–∞ ¬´–°–ü–ê–†–ò–í–ê–ù–ò–ï¬ª–§—É–Ω–∫—Ü–∏—è¬†mate()¬†–ø—Ä–∏–º–µ—Ç
–≥–µ–Ω–æ–º—ã¬†father¬†–∏¬†mother¬†–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç –¥–≤—É—Ö –¥–µ—Ç–µ–π. –ú—ã —Ç–∞–∫–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–º
–º—É—Ç–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º—è —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è.–ö–∞–∂–¥—ã–π –±–∏—Ç –¥–µ—Ç—Å–∫–æ–≥–æ –≥–µ–Ω–æ–º–∞ –±—É–¥–µ—Ç
–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –±–∏—Ç–∞ –≥–µ–Ω–æ–º–∞ –æ—Ç—Ü–∞ –∏–ª–∏
–º–∞—Ç–µ—Ä–∏. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Ä–µ–±–µ–Ω–æ–∫ —É–Ω–∞—Å–ª–µ–¥—É–µ—Ç –±–∏—Ç –æ—Ç—Ü–∞ –∏–ª–∏ –º–∞—Ç–µ—Ä–∏,
—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç¬†50/50%. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≥–µ–Ω–æ–º—ã
–¥–ª–∏–Ω–æ–π¬†4¬†–≥–µ–Ω–∞:Father's genome: [0, 0, 1, 1] Mother's genome: [0, 1, 0,
1]                   ‚Üì  ‚Üì  ‚Üì  ‚Üì Possible kid #1: [0, 1, 1, 1] Possible
kid #2: [0, 0, 1, 1]–í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤—ã—à–µ –ø—Ä–∏–º–µ—Ä–µ –º—É—Ç–∞—Ü–∏–∏ –Ω–µ
—É—á–∏—Ç—ã–≤–∞–ª–∏—Å—å.–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º://
Performs Uniform Crossover: each bit is chosen from either parent with
equal probability. // @see:
https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm) function
mate(   father: Genome,   mother: Genome,   mutationProbability:
Probability, ): [Genome, Genome] {   if (father.length !==
mother.length) {     throw new Error('Cannot mate different species');
}   const firstChild: Genome = [];   const secondChild: Genome = [];
// Conceive children.   for (let geneIndex = 0; geneIndex <
father.length; geneIndex += 1) {     firstChild.push(
Math.random() < 0.5 ? father[geneIndex] : mother[geneIndex]     );
secondChild.push(       Math.random() < 0.5 ? father[geneIndex] :
mother[geneIndex]     );   }   return [     mutate(firstChild,
mutationProbability),     mutate(secondChild, mutationProbability),
]; }–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–≥–∞ ¬´–°–ï–õ–ï–ö–¶–ò–Ø¬ª–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω—ã—Ö
–æ—Å–æ–±–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è, –Ω–∞–º –Ω—É–∂–µ–Ω —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å
–∫–∞–∂–¥–æ–≥–æ –≥–µ–Ω–æ–º–∞. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–æ–π —Ñ–∏—Ç–Ω–µ—Å-
—Ñ—É–Ω–∫—Ü–∏–µ–π.–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ–≥–¥–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ–π,
–∫–æ—Ç–æ—Ä—É—é –º—ã –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å, –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π. –í –Ω–∞—à–µ–º
—Å–ª—É—á–∞–µ —Ñ–∏—Ç–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏–∑–º–µ—Ä—è—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º –∏
–º–µ—Å—Ç–æ–º –ø–∞—Ä–∫–æ–≤–∫–∏. –ß–µ–º –±–ª–∏–∂–µ –º–∞—à–∏–Ω–∞ –∫ –º–µ—Å—Ç—É —Å—Ç–æ—è–Ω–∫–∏, —Ç–µ–º –æ–Ω–∞ "–ª—É—á—à–µ"
(–±–æ–ª–µ–µ –ø—Ä–∏–≥–æ–¥–Ω–∞). –ú—ã —Ä–µ–∞–ª–∏–∑—É–µ–º —Ñ–∏—Ç–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏—é —á—É—Ç—å –ø–æ–∑–∂–µ, –∞ –ø–æ–∫–∞
–¥–∞–≤–∞–π—Ç–µ –æ–ø–∏—à–µ–º –µ–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:type FitnessFunction = (genome: Genome) =>
number;–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è
–∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É—É–º–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º —Ç–∞–∫–∂–µ, —á—Ç–æ –º—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏
–≤—Å–µ—Ö –∏–Ω–¥–∏–≤–∏–¥—É—É–º–æ–≤ –ø–æ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏, —Ç–∞–∫ —á—Ç–æ –ø–µ—Ä–≤—ã–µ
–æ—Å–æ–±–∏ —è–≤–ª—è—é—Ç—Å—è —Å–∞–º—ã–º–∏ —Å–∏–ª—å–Ω—ã–º–∏. –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –æ—Ç—Ü–æ–≤ –∏ –º–∞—Ç–µ—Ä–µ–π –∏–∑ —ç—Ç–æ–≥–æ
–º–∞—Å—Å–∏–≤–∞? –ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–±–æ—Ä —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —á–µ–º –≤—ã—à–µ
–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É—É–º–∞, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å—ã, —á—Ç–æ —ç—Ç–æ—Ç
–∏–Ω–¥–∏–≤–∏–¥—É—É–º –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –¥–ª—è —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è. –í —ç—Ç–æ–º –Ω–∞–º –ø–æ–º–æ–∂–µ—Ç
—Ñ—É–Ω–∫—Ü–∏—è¬†weightedRandom().// Picks the random item based on its weight.
// The items with a higher weight will be picked more often. const
weightedRandom = <T>(items: T[], weights: number[]): { item: T, index:
number } => {   if (items.length !== weights.length) {     throw new
Error('Items and weights must be of the same size');   }   //
Preparing the cumulative weights array.   // For example:   // -
weights = [1, 4, 3]   // - cumulativeWeights = [1, 5, 8]   const
cumulativeWeights: number[] = [];   for (let i = 0; i <
weights.length; i += 1) {     cumulativeWeights[i] = weights[i] +
(cumulativeWeights[i - 1] || 0);   }   // Getting the random number in
a range [0...sum(weights)]   // For example:   // - weights = [1, 4,
3]   // - maxCumulativeWeight = 8   // - range for the random number
is [0...8]   const maxCumulativeWeight =
cumulativeWeights[cumulativeWeights.length - 1];   const randomNumber
= maxCumulativeWeight * Math.random();   // Picking the random item
based on its weight.   // The items with higher weight will be picked
more often.   for (let i = 0; i < items.length; i += 1) {     if
(cumulativeWeights[i] >= randomNumber) {       return {         item:
items[i],         index: i,       };     }   }   return {     item:
items[items.length - 1],     index: items.length - 1,   };
};–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ. –î–æ–ø—É—Å—Ç–∏–º, –≤—ã –æ—á–µ–Ω—å –ª—é–±–∏—Ç–µ
–±–∞–Ω–∞–Ω—ã –∏ —Ö–æ—Ç–∏—Ç–µ –µ—Å—Ç—å –∏—Ö —á–∞—â–µ, —á–µ–º –∫–ª—É–±–Ω–∏–∫—É. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å
—Ñ—É–Ω–∫—Ü–∏—é¬†const fruit = weightedRandom(['banana', 'strawberry'], [9,
1]), –∏ –≤¬†‚âà9¬†—Å–ª—É—á–∞—è—Ö –∏–∑¬†10¬†–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è¬†fruit¬†–±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞¬†banana, –∏
—Ç–æ–ª—å–∫–æ –≤¬†‚âà1¬†–∏–∑¬†10¬†—Å–ª—É—á–∞–µ–≤ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞¬†strawberry.–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å
–ø–æ—Ç–µ—Ä–∏ –ª—É—á—à–∏—Ö –æ—Å–æ–±–µ–π (–Ω–∞–∑–æ–≤–µ–º –∏—Ö —á–µ–º–ø–∏–æ–Ω–∞–º–∏) –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è, –º—ã
–º–æ–∂–µ–º —Ç–∞–∫–∂–µ –≤–≤–µ—Å—Ç–∏ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π
–ø–∞—Ä–∞–º–µ—Ç—Ä¬†longLivingChampionsPercentage. –ù–∞–ø—Ä–∏–º–µ—Ä,
–µ—Å–ª–∏¬†longLivingChampionsPercentage = 10, —Ç–æ¬†10%¬†–ª—É—á—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑
–ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–ø—É–ª—è—Ü–∏–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ
–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–≥–æ–∂–∏—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ–∂–∏—Ç—å
–¥–æ–ª–≥—É—é –∂–∏–∑–Ω—å –∏ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏—Ö –¥–µ—Ç–µ–π –∏ –¥–∞–∂–µ –≤–Ω—É–∫–æ–≤.–ú—ã –º–æ–∂–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
—Ñ—É–Ω–∫—Ü–∏—é¬†select()¬†—Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:// The number between 0 and 100.
type Percentage = number; type SelectionOptions = {
mutationProbability: Probability,   longLivingChampionsPercentage:
Percentage, }; // @see:
https://en.wikipedia.org/wiki/Selection_(genetic_algorithm) function
select(   generation: Generation,   fitness: FitnessFunction,
options: SelectionOptions, ) {   const {     mutationProbability,
longLivingChampionsPercentage,   } = options;   const newGeneration:
Generation = [];   const oldGeneration = [...generation];   // First
one - the fittest one.   oldGeneration.sort((genomeA: Genome, genomeB:
Genome): number => {     const fitnessA = fitness(genomeA);     const
fitnessB = fitness(genomeB);     if (fitnessA < fitnessB) {
return 1;     }     if (fitnessA > fitnessB) {       return -1;     }
return 0;   });   // Let long-liver champions continue living in the
new generation.   const longLiversCount =
Math.floor(longLivingChampionsPercentage * oldGeneration.length /
100);   if (longLiversCount) {     oldGeneration.slice(0,
longLiversCount).forEach((longLivingGenome: Genome) => {
newGeneration.push(longLivingGenome);     });   }   // Get the data
about he fitness of each individuum.   const fitnessPerOldGenome:
number[] = oldGeneration.map((genome: Genome) => fitness(genome));
// Populate the next generation until it becomes the same size as a
old generation.   while (newGeneration.length < generation.length) {
// Select random father and mother from the population.     // The
fittest individuums have higher chances to be selected.     let
father: Genome | null = null;     let fatherGenomeIndex: number | null
= null;     let mother: Genome | null = null;     let
matherGenomeIndex: number | null = null; // To produce children the
father and mother need each other. // It must be two different
individuums. while (!father || !mother || fatherGenomeIndex ===
matherGenomeIndex) {   const {     item: randomFather,     index:
randomFatherGenomeIndex,   } =
weightedRandom&lt;Genome&gt;(generation, fitnessPerOldGenome);
const {     item: randomMother,     index: randomMotherGenomeIndex,
} = weightedRandom&lt;Genome&gt;(generation, fitnessPerOldGenome);
father = randomFather;   fatherGenomeIndex = randomFatherGenomeIndex;
mother = randomMother;   matherGenomeIndex = randomMotherGenomeIndex;
}  // Let father and mother produce two children. const [firstChild,
secondChild] = mate(father, mother, mutationProbability);
newGeneration.push(firstChild);  // Depending on the number of long-
living champions it is possible that // there will be the place for
only one child, sorry. if (newGeneration.length &lt;
generation.length) {   newGeneration.push(secondChild); }    }
return newGeneration; }–§–∏—Ç–Ω–µ—Å–∞-—Ñ—É–Ω–∫—Ü–∏—è (—Ñ—É–Ω–∫—Ü–∏—è
–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏)–ü—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç
–∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ –º–µ—Å—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏. –ß–µ–º –≤—ã—à–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è, —Ç–µ–º –Ω–∏–∂–µ
–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å.–ú—ã –±—É–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç¬†4¬†–∫–æ–ª–µ—Å
–∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö¬†4¬†—É–≥–ª–æ–≤ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞. –≠—Ç–æ
—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º—ã –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å –ø–æ—Ç–µ—Ä–µ–π (—É—Ä–æ–Ω–æ–º), –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞—Ç–Ω–æ
–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏.–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º
–∫–æ–ª–µ—Å–æ–º –∏ –∫–∞–∂–¥—ã–º —É–≥–ª–æ–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
—Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞) –ø–æ–∑–≤–æ–ª–∏—Ç
–∞–≤—Ç–æ–º–æ–±–∏–ª—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ
–º–µ—Å—Ç–∞.–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è
–Ω–∞ –æ—Å–Ω–æ–≤–µ¬†—Ç–µ–æ—Ä–µ–º—ã –ü–∏—Ñ–∞–≥–æ—Ä–∞¬†(—É—Ä–∞! –æ–Ω–∞ –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏–ª–∞—Å—å –ø–æ—Å–ª–µ
—à–∫–æ–ª—ã!) —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:type NumVec3 = [number, number, number]; //
Calculates the XZ distance between two points in space. // The
vertical Y distance is not being taken into account. const
euclideanDistance = (from: NumVec3, to: NumVec3) => {   const fromX =
from[0];   const fromZ = from[2];   const toX = to[0];   const toZ =
to[2];   return Math.sqrt((fromX - toX) ** 2 + (fromZ - toZ) ** 2);
};–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º –∏ –º–µ—Å—Ç–æ–º –ø–∞—Ä–∫–æ–≤–∫–∏ (—É—Ä–æ–Ω) –±—É–¥–µ—Ç
—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:type RectanglePoints = {   fl:
NumVec3, // Front-left   fr: NumVec3, // Front-right   bl: NumVec3, //
Back-left   br: NumVec3, // Back-right }; type GeometricParams = {
wheelsPosition: RectanglePoints,   parkingLotCorners: RectanglePoints,
}; const carLoss = (params: GeometricParams): number => {   const {
wheelsPosition, parkingLotCorners } = params;   const {     fl:
flWheel,     fr: frWheel,     br: brWheel,     bl: blWheel,   } =
wheelsPosition;   const {     fl: flCorner,     fr: frCorner,     br:
brCorner,     bl: blCorner,   } = parkingLotCorners;   const
flDistance = euclideanDistance(flWheel, flCorner);   const frDistance
= euclideanDistance(frWheel, frCorner);   const brDistance =
euclideanDistance(brWheel, brCorner);   const blDistance =
euclideanDistance(blWheel, blCorner);   return (flDistance +
frDistance + brDistance + blDistance) / 4; };–ü–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å
(fitness) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —É—Ä–æ–Ω—É (loss), –º—ã
—Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –µ–µ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:const carFitness = (params:
GeometricParams): number => {   const loss = carLoss(params);   //
Adding +1 to avoid a division by zero.   return 1 / (loss + 1); };–í—ã
–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è¬†fitness¬†–∏¬†loss¬†–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–æ–º–∞ –∏ –¥–ª—è
—Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –ø–∞–Ω–µ–ª–∏¬†—Å–∏–º—É–ª—è—Ç–æ—Ä–∞:–ó–∞–ø—É—Å–∫–∞–µ–º
—ç–≤–æ–ª—é—Ü–∏—é–°–æ–±–µ—Ä–µ–º –≤–º–µ—Å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–≤–æ–ª—é—Ü–∏–∏. –ú—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è ¬´—Å–æ–∑–¥–∞—Ç—å –º–∏—Ä¬ª,
–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏, –∑–∞—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –∏–¥—Ç–∏, –ø–æ–∫–æ–ª–µ–Ω–∏–µ -
—ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ - —É—á–∏—Ç—å—Å—è –ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è.–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å
–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã, –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
–ø–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—à–∏–Ω –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–º –º–∏—Ä–µ.¬†–°–∏–º—É–ª—è—Ç–æ—Ä
—ç–≤–æ–ª—é—Ü–∏–∏¬†–¥–µ–ª–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ - –æ–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥ –≤
—Å–∏–º—É–ª—è—Ç–æ—Ä–µ,¬†—Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å –ø–æ–º–æ—â—å—é Three.js:// Evolution setup example.
// Configurable via the Evolution Simulator. const GENERATION_SIZE =
1000; const LONG_LIVING_CHAMPIONS_PERCENTAGE = 6; const
MUTATION_PROBABILITY = 0.04; const MAX_GENERATIONS_NUM = 40; //
Fitness function. // It is like an annual doctor's checkup for the
cars. const carFitnessFunction = (genome: Genome): number => {   //
The evolution simulator calculates and stores the fitness values for
each car in the fitnessValues map.   // Here we will just fetch the
pre-calculated fitness value for the car in current generation.
const genomeKey = genome.join('');   return fitnessValues[genomeKey];
}; // Creating the "world" with the very first cars generation. let
generationIndex = 0; let generation: Generation = createGeneration({
generationSize: GENERATION_SIZE,   genomeLength: GENOME_LENGTH, // <-
180 genes }); // Starting the "time". while(generationIndex <
MAX_GENERATIONS_NUM) {   // SIMULATION IS NEEDED HERE to pre-calculate
the fitness values.   // Selecting, mating, and mutating the current
generation.   generation = select(     generation,
carFitnessFunction,     {       mutationProbability:
MUTATION_PROBABILITY,       longLivingChampionsPercentage:
LONG_LIVING_CHAMPIONS_PERCENTAGE,     },   );   // Make the "time" go
by.   generationIndex += 1; } // Here we may check the fittest
individuum of the latest generation. const fittestCar =
generation[0];–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
—Ñ—É–Ω–∫—Ü–∏–∏¬†select()¬†–º–∞—Å—Å–∏–≤¬†generation¬†—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–∏–±–æ–ª–µ–µ
–ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º –≤
–º–∞—Å—Å–∏–≤–µ.–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ 1-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è¬†—Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –≥–µ–Ω–æ–º–æ–º –±—É–¥—É—Ç –≤–µ—Å—Ç–∏
—Å–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ ‚âà40-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è¬†–Ω–∞—á–∏–Ω–∞—é—Ç —É—á–∏—Ç—å—Å—è
–ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –≤—Å–µ –±–ª–∏–∂–µ –ø—Ä–∏–±–ª–∏–∂–∞—é—Ç—Å—è –∫ –º–µ—Å—Ç—É
–ø–∞—Ä–∫–æ–≤–∫–∏:–î—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä —Å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–æ–π:–ü–æ
–ø—É—Ç–∏ –º–∞—à–∏–Ω—ã —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –º–∞—à–∏–Ω–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –Ω–µ—Ç–æ—á–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç
–ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ, –Ω–æ —ç—Ç–æ –≤—Å–µ–≥–æ-–ª–∏—à—å 40-–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
–º–∏—Ä–∞ –¥–ª—è –Ω–∏—Ö, —Ç–∞–∫ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –º–∞—à–∏–Ω–∞–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è
–æ–±—É—á–µ–Ω–∏—è.–ò–∑ –ø–æ–∫–æ–ª–µ–Ω–∏—è –≤ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –º—ã –º–æ–∂–µ–º –≤–∏–¥–µ—Ç—å, –∫–∞–∫ —É—Ä–æ–Ω
—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è (—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç—É—Ç).¬†P50 Avg
Loss¬†–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ (—Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç
–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–æ –º–µ—Å—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏) –¥–ª—è¬†50%¬†–Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω—ã—Ö
–∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.¬†Min Loss¬†–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ–≥–æ
–∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∫–∞–∂–¥–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏.–í—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å, —á—Ç–æ –≤
—Å—Ä–µ–¥–Ω–µ–º¬†50%¬†–Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —É—á–∞—Ç—Å—è –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å—Å—è –∫
–º–µ—Å—Ç—É –ø–∞—Ä–∫–æ–≤–∫–∏ (–æ—Ç¬†5,5–º¬†–æ—Ç –º–µ—Å—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏ –¥–æ¬†3,5–º¬†–∑–∞¬†35¬†–ø–æ–∫–æ–ª–µ–Ω–∏–π).
–¢—Ä–µ–Ω–¥ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π¬†Min Loss¬†–º–µ–Ω–µ–µ –æ—á–µ–≤–∏–¥–µ–Ω (–æ—Ç¬†1–º¬†–¥–æ¬†0,5–º¬†—Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏
—à—É–º–æ–º), –æ–¥–Ω–∞–∫–æ –∏–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã—à–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
–Ω–∞—É—á–∏–ª–∏—Å—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –±–∞–∑–æ–≤—ã–º –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏—è–º.–ó–∞–∫–ª—é—á–µ–Ω–∏–µ–í —ç—Ç–æ–π
—Å—Ç–∞—Ç—å–µ –º—ã —Å–≤–µ–ª–∏ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∑–∞–¥–∞—á—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ
–ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∫ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∑–∞–¥–∞—á–µ
–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑¬†180¬†–µ–¥–∏–Ω–∏—Ü –∏ –Ω—É–ª–µ–π (–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ
–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–æ–º–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è).–ó–∞—Ç–µ–º –º—ã –ø—Ä–∏–º–µ–Ω–∏–ª–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π
–∞–ª–≥–æ—Ä–∏—Ç–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≥–µ–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ –Ω–∞–º
–ø–æ–ª—É—á–∏—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
(–≤–º–µ—Å—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–Ω–æ–≥–∏—Ö –ª–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞).–í—ã
–º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å üöï¬†–°–∏–º—É–ª—è—Ç–æ—Ä —ç–≤–æ–ª—é—Ü–∏–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π
–ø—Ä–æ—Ü–µ—Å—Å –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –°–∏–º—É–ª—è—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ
–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:–í—ã —Å–º–æ–∂–µ—Ç–µ¬†–Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–∞—à–∏–Ω —Å –Ω—É–ª—è¬†–∏ –∏–∑–º–µ–Ω–∏—Ç—å
–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–≤–æ–ª—é—Ü–∏–∏–í—ã —Å–º–æ–∂–µ—Ç–µ¬†—É–≤–∏–¥–µ—Ç—å –∫–∞–∫ –ø–∞—Ä–∫—É—é—Ç—Å—è —É–∂–µ –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
–∞–≤—Ç–æ–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ¬†–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞—Ç—å –∞–≤—Ç–æ –≤—Ä—É—á–Ω—É—é–ü–æ–ª–Ω—ã–π
–≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥, –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –≤ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ, —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏
–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏¬†Evolution Simulator repository. –ï—Å–ª–∏ –≤—ã –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫—Ç–æ
–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã
—É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∏—Ö –º–µ–Ω—å—à–µ 500 (–±–µ–∑ —É—á–µ—Ç–∞ —Ç–µ—Å—Ç–æ–≤), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ
–∫–æ–¥¬†–∑–¥–µ—Å—å¬†ü•∏.–û—Å—Ç–∞–ª—Å—è –µ—â–µ —Ä—è–¥¬†–Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º¬†—Å –∫–æ–¥–æ–º –∏
—Å–∏–º—É–ª—è—Ç–æ—Ä–æ–º:–ú–æ–∑–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ª–∏—à–∫–æ–º —É–ø—Ä–æ—â–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–µ
—É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ, —Å–∫–∞–∂–µ–º, –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å
–Ω–µ–ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω—ã–º –∫ –Ω–æ–≤–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é –∏–ª–∏ –Ω–æ–≤—ã–º —Ç–∏–ø–∞–º –ø–∞—Ä–∫–æ–≤–æ–∫.–ú—ã –Ω–µ
—É–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã, –∫–æ–≥–¥–∞ –æ–Ω–∞ –Ω–∞–µ–∑–∂–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥—É—é
–º–∞—à–∏–Ω—É. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ ¬´—á—É–≤—Å—Ç–≤—É–µ—Ç¬ª –Ω–∏–∫–∞–∫–æ–π –≤–∏–Ω—ã –≤
—Å–æ–∑–¥–∞–Ω–∏–∏ –î–¢–ü.–°–∏–º—É–ª—è—Ç–æ—Ä —ç–≤–æ–ª—é—Ü–∏–∏ –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–¥–∏–Ω –∏
—Ç–æ—Ç –∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –≥–µ–Ω–æ–º –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
–ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç–≤–æ–ª—é—Ü–∏—é –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π.–°–∏–º—É–ª—è—Ç–æ—Ä
—ç–≤–æ–ª—é—Ü–∏–∏ —Ç–∞–∫–∂–µ –æ—á–µ–Ω—å "—Ç—è–∂–µ–ª—ã–π" —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ
–∑–∞–º–µ–¥–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —ç–≤–æ–ª—é—Ü–∏–∏, –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—É—á–∏—Ç—å, —Å–∫–∞–∂–µ–º,
1000 –º–∞—à–∏–Ω –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.–¢–∞–∫–∂–µ —Å–∏–º—É–ª—è—Ç–æ—Ä —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –≤–∫–ª–∞–¥–∫–∞
–±—Ä–∞—É–∑–µ—Ä–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏.–∏¬†–ø—Ä.–¢–µ–º –Ω–µ
–º–µ–Ω–µ–µ, —Ü–µ–ª—å—é —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏ –±—ã–ª–æ –∏–∑—É—á–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π
–∞–ª–≥–æ—Ä–∏—Ç–º, –∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–∞—Ä–∫—É—é—â–µ–π—Å—è Tesla. –Ø –Ω–∞–¥–µ—é—Å—å, –≤—ã —Ö–æ—Ä–æ—à–æ
–ø—Ä–æ–≤–µ–ª–∏ –≤—Ä–µ–º—è, —á–∏—Ç–∞—è —Å—Ç–∞—Ç—å—é, –¥–∞–∂–µ —Å —É—á–µ—Ç–æ–º —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤—ã—à–µ
–Ω–µ–¥–æ—Ä–∞–±–æ—Ç–æ–∫.
