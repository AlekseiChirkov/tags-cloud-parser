Автор: markshevchenko
Дата: 2021-09-28T14:25:12.000Z
Название: Лучший язык программирования
Теги: Программирование *
Текст:
Вопрос, который часто задают начинающие программисты — какой язык
программирования изучать? Вопрос звучит разумно. Хочется выбрать самый
лучший, чтобы потом не пришлось переучиваться.Можно ли на него
ответить?Я работаю программистом тридцать лет. За эти годы индустрия
несколько раз претерпевала кардинальные изменения. У меня были любимые
языки, но ни один из них не стал единственным выбором на долгое время.
И дело не в том, что я меняю языки, как перчатки. Меняется сама
жизнь.В конце 90-х я писал на С++ и присматривался к вебу. Писать веб-
приложения на C++ было безумием. Тогда не было ни Python, ни Ruby, ни
C#, и даже PHP был в зачаточном состоянии. Свои первые программы для
веба я написал на Perl. Сейчас проект на Perl назовут глубоко и
безоговорочно устаревшим.Все тридцать лет мне постоянно приходится
изучать новые языки программирования. Причиной тому не только
любознательность, но и банальная жизненная необходимость. Сегодня
востребованы программисты на Python, Go, C#, Java. То, что я знаю язык
Ассемблера и Delphi, не помогает мне найти интересную
высокооплачиваемую работу. В индустрии ходят слухи о баснословных
зарплатах программистов на COBOL. Не знаю. Не уверен. Программисты на
Go сейчас гораздо нужнее.Если постоянно приходится учить новые языки,
значит, лучшего языка в принципе не существует. Что же тогда делать
начинающему программисту?Ответ — научиться быстро осваивать новые
языки. Чтобы проиллюстрировать эту мысль, расскажу историю из жизни.
Обычно изучение нового языка занимает несколько дней, иногда недель,
но C# я выучил за двадцать минут.Я много лет писал на C++, потом
неплохо освоил Java и, оказалось, что все основные концепции C# были
мне знакомы. Знатокам C# напомню, что речь идёт про 2003 год, когда в
языке не было ни LINQ, ни async/await, ни даже обобщённого
программирования.Я открыл MSDN, прочитал несколько страниц, и написал
первый код, который сразу ушёл в прод. Конечно, я не знал язык
полностью — пара моментов потребовала дополнительного освоения. В
частности, новой для меня оказалась концепция делегатов. В C++ и Java
есть свои способы, чтобы работать с указателями на функцию, а в C# для
этого придумали новое средство языка.Потребовалось время, чтобы
уложить в голове всё, что связано с новинкой, в частности, чтобы
понять, чем делегаты отличаются от событий. Но, даже не владея этими
аспектами языка, я уже писал рабочий код.Языки программирования похожи
друг на друга. Они образуют целые семейства с общими идеями, а иногда
даже и общим синтаксисом. Скажем, C++, Java и C# очень похожи друг на
друга не только концептуально, но и синтаксически.Зная один язык из
семейства, вы быстро начнёте писать на родственном языке, даже если у
него будет непохожий синтаксис. В этом ключ к быстрому изучению
языков.Освойте несколько языков из кардинально разных семейств, и вам
будут знакомы большинство концепций, встречающихся в современных
языках программирования.Семейства языковМы ступаем на нетвёрдую почву
классификаций. Что бы я ни написал, найдётся читатель, не согласный с
предложенными критериями. Я, тем не менее, попробую, и начну с
общепризнанных устоявшихся способов разделить языки на
группы.Исторически, самая ранняя классификация касается первых языков
программирования высокого уровня — Fortran и LISP. Первый из них был
императивным, то есть состоял из императивов. Слово императив в
русском языке используют редко, нам привычнее слово команда. Программа
на императивном языке программирования — это последовательность
команд, которые выполняет компьютер.Второй — LISP — положил начало
функциональным языкам. Вместо команд здесь используют примитивные
чистые функции, которые комбинируют в чуть более крупные функции, а
те, в свою очередь — в ещё более крупные. В конечном счёте, программа
на функциональном языке — это одна большая функция, которую компьютер
и вычисляет.К императивным языкам, помимо Fortran, можно отнести
Pascal, C, C++, Java, C#, Python, Go. К функциональным — Haskell,
Scala, Erlang, Clojure, Scheme, F#.В этой классификации есть изъяны.
Во-первых, не все согласны с простым определением функциональных
языков. Некоторые специалисты считают, что истинно функциональными
можно считать только чистые функциональные языки. Из известных это,
фактически, только Haskell.Во-вторых, современные языки поддерживают
сразу несколько парадигм. Лямбда-функции, являющиеся основой основ
функциональных языков, сейчас можно встретить во многих императивных
языках, включая C++.Несмотря на недостатки классификации, я рекомендую
следовать первоначальному плану. Возьмите пару императивных языков и
пару функциональных, и напишите на них несколько небольших программ.
Будет здорово, если вы выберете языки с разным синтаксисом.Незнакомый
синтаксис заставляет считать новые языки непонятными. Но в
действительности, к нему можно привыкнуть всего за несколько дней.
Незнакомые концепции могут оказаться гораздо сложнее.В императивных
языках долгое время существовало разделение на код и данные, при этом
код управлял данными. Языки такого рода сейчас называют процедурными,
к ним, например, относят Fortran, Pascal и C.В противовес им, в
объектно-ориентированных языках программист размещает код и данные
вместе, и называет объектом. К таким языкам относят C++, Object
Pascal, Java, C#, JavaScript.Существуют ли объектно-ориентированные
функциональные языки? Да, конечно. Обычно разработчики языка совмещают
несколько разных парадигм, что, кстати, значительно облегчает нашу
задачу, а именно, освоение разных концепций. И если Pascal —
императивный  и процедурный, то OCaml — функциональный и объекто-
ориентированный.Языки также классифицируют по тому, как они работают с
типами данных. Разделяют статически типизированные и динамически
типизированные языки, а также языки с сильной и слабой
типизацией.Динамически типизированные языки часто используют для
разработки небольших программ — скриптов или сценариев. Они просты в
изучении, нетребовательны к квалификации программиста и обычно
позволяют писать короткий код. К ним относят JavaScript, Python, PHP,
Ruby.Статически типизированные языки проверяют соответствие типов
данных, поэтому программисту приходится описывать объекты, которые он
использует. Это касается и переменных, и функций, и даже самих типов.
Программы на таких языках обычно больше по размеру, поскольку, в
определённом смысле, дублирование помогает справляться с опечатками и
другими простыми ошибками. В этой категории мы обнаружим C++, Java,
C#, Kotlin, Go.Ещё один признанный способ классификации — разделение
языков на низкоуровневые и высокоуровневые. Языки низкого уровня
используют в системном программировании и разработке игр, то есть там,
где требуется высокая производительность кода и экономия ресурсов. К
ним относят C, C++, Rust и, в какой-то мере, Go.Языки высокого уровня
повышают производительность программиста. Ему не приходится
распределять память или вручную обрабатывать строки, он занимается
решением бизнес-задач. В категорию высокоуровневых входят Java, C#,
Scala, Python, Ruby.Если языку программирования не хватает скорости,
часть программы пишут на низкоуровневом языке и вызывают этот быстрый
код из языка высокого уровня. Подобное смешение возможно за счёт
техник, которые в целом называют Foreign Function Interface (FFI), или
Интерфейс Внешних Функций.Наконец, языки бывают универсальные и
нишевые. Это условное разделение, поскольку нишевые языки практически
не похожи друг на друга. Просто надо помнить, что для работы с базами
данных придётся учить SQL, для разработки фронтенда — JavaScript, а
для проектирования iOS приложений — Swift.ФундаментПомимо
лингвистических знаний в быстро меняющемся мире важны знания
фундаментальные. Те, что не потеряют своей актуальности и через десять
лет, и через двадцать.Очевидная база для программистов — алгоритмы и
структуры данных. Она вызывает серьёзные споры, потому что у многих
программистов эти знания зачастую не востребованы. Как говорят в
интернет-баталиях, чтобы пилить круды, алгоритмы не нужны. И в этом
есть доля истины.Но здесь полезно вспомнить историю. Двадцать лет
назад круды пилили не на Python, а на Delphi. Бекенд писали на Perl.
За свою карьеру, хотите вы этого или нет, вы несколько раз  поменяете
стек. И, возможно, единственное, что вам не придётся изучать на новых
платформах — это фундамент.Время от времени вам будут попадаться
алгоритмические задачи. Полезно иметь представление об алгоритмах,
чтобы писать быстрый код. Тем более, что разбираться с темой придётся
только единожды.Не языками единымиКроме языков программирования, нам
нужны инструменты и методологии. Где бы вы ни работали, вам наверняка
пригодится git. Даже если вы не работаете в команде, заведите аккаунт
на GitHub и держите там домашние проекты.Разберитесь с непрерывной
интеграцией и развёртыванием — CI/CD. Настройте автоматическую сборку
своих проектов.Научитесь писать модульные тесты. Сделайте тестирование
одним из этапов сборки, чтобы ваш проект собирался только в случае,
если проходят все тесты.Доведите знание английского до уровня B2 —
Upper Intermediate. Этого достаточно, чтобы воспринимать английскую
речь на слух, общаться с носителями языка и писать письма.Я учил
английский в школе. Мне хватало его, чтобы читать документацию и
немного писать. Но сейчас, во времена YouTube, новые знаниях приходят
к нам через видео лекции и доклады. Приходится доучивать английский,
чтобы не перекрывать себе этот важнейший канал.ЗаключениеЧто можно
сказать про индустрию, проработав в ней тридцать лет? Технологии
умирают, и умирают быстро. Больше нет dBASE и Clarion, и даже названия
эти современным программистам неведомы. Священная война между Pascal и
C, которая шла все восьмидесятые, как-то обыденно закончилась победой
C. Но сейчас это никого не волнует — что нам Pascal и C, когда мы
пишем на Java?Мы учимся, зная, что 90% новых знаний устареют уже через
три года. Возможно, нам  надо освоить ещё два навыка.Умение забывать.
И умение не учить всё подряд, особенно если это всё очень модное и
современное. Никто не знает, какой срок отмерен модным технологиям.
Будьте избирательны.
