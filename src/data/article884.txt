Автор: YevSam
Дата: 2021-09-21T18:28:06.000Z
Название: Какую СУБД выбрать и почему? (Статья 1)
Теги: Oracle *, SQL *, NoSQL *, Microsoft SQL Server *
Текст:
Это первый выпуск в серии статей про СУБД, в рамках которых буду
достаточно простыми словами давать информацию про то, что сейчас есть
на рынке баз данных, и что выбрать для решения своих задач.Заметил,
что когда спрашиваешь кого-нибудь, особенно на собеседовании, какие
типы СУБД существуют, то первое что вспоминают многие – это
реляционные базы данных, и NoSQL, а вот про разновидности часто
забывают или не могут сформулировать их отличие. Поэтому начнем с
простого перечисления наиболее используемых.РеляционныеКлюч-
значениеДокументныеГрафовыеКолоночныеТем, кому не хочется долго
читать, может сразу перейти на итоговую таблицу.Нужно обязательно
сделать ремарку, что некоторые крупные производители, имеют в своем
арсенале несколько типов СУБД, как в виде отдельных продуктов, так и в
виде внутренней реализации. Например, у Oracle на самом деле чего
только нет, начиная с классической реляционной СУБД, продолжая с
отдельным продуктом Oracle NoSQL Database, который может
использоваться и как документная, и как колоночная, и как ключ-
значение. Отдельное решение от того же Oracle, Autonomous Data
Warehouse – это уже специализированное решение для хранилищ данных.
Еще один отдельный продукт от Oracle – Oracle Graph Server для работы
с графами, и еще много другого. Этому можно посвятить отдельную серию
статей.Реляционные СУБДНачнем по порядку, классические, реляционные
СУБД чаще всего используются для построения решений OLTP (Online
Transaction Processing). В таких решениях СУБД работает с небольшими
по размерам транзакциями, но идущими большим потоком, и при этом от
системы требуется минимальное время отклика, а так же возможность, при
определенных условиях, отменить любые изменения выполняемых в рамках
транзакции. Если вы строите систему, в рамках которой требуется
хранить значительное количество сущностей (таблиц), с различными
типами связей между ними (один-к-одному, один-к-многим, многие-ко-
многим), то это скорее всего про реляционные СУБД. Наиболее известные
СУБД такого типа - Oracle, Microsoft SQL, PostgreSQL, MySQL.Когда
выбирать реляционную СУБДОдин из основных признаков, который говорит о
том что нужно выбирать реляционную СУБД – это высокая нормализация
данных. Дополнительными признаками будет необходимость обработки
большого кол-ва коротких транзакций, с большей долей операций на
вставкуКогда не выбирать реляционную СУБДЕсли предполагается хранить
не структурируемые данные, или наоборот очень простые структуры типа
ключ-значение, то лучше посмотреть в сторону документных СУБД и
специализированных СУБД типа ключ-значение соответственно.Так же один
из признаков, что имеет смысл подумать не о реляционных СУБД, это
такой факт как необходимость часто обновлять значения в одних и тех же
строках. Обычно это обходится "дорого" в реляционных СУБД, и нужно
применять "продвинутую магию" что бы делать это корректно.Конечно, тут
есть много «но», или «а если очень хочется», и других ситуаций, когда
данные рекомендации можно игнорировать. Это нормально, особенно когда
за дело берется эксперт, который знает как это сделать.СУБД типа ключ-
значениеНаверное один из самых простых типов СУБД. В упрощенном виде,
это некая таблица с уникальным ключом и собственно связанным с ним
значением, в котором может быть что угодно.  Чаще всего такие СУБД
используют для кэширования, т.к. они очень быстро работают, а это и не
сложно, когда есть уникальный ключ, и запрос возвращает только одно
значение. У некоторых представителей данных СУБД есть возможность
работать полностью в памяти, а так же есть возможность задавать срок
жизни записи, после истечения которого, записи будут автоматически
удаляться.Наиболее известные СУБД такого типа - Redis и
Memcached.Когда выбирать СУБД ключ-значениеЕсли СУБД будет
использоваться для кэширования данных или для брокеров сообщений, то
это очень подходящий тип. Так же, такая СУБД хорошо подходит для баз
где нужно хранить достаточно простые структуры, и иметь к ним очень
быстрый доступ.Когда не выбирать СУБД ключ-значениеЕсли вы
предполагаете хранить в базе данных много сущностей (таблиц), а у
сущностей будут сложные структуры с разными типами данных. Так же,
если вы предполагаете делать из этой таблицы сложные запросы которые
возвращают множества строк.Документные СУБДДокументные или документно-
ориентированные СУБД - это одна из наиболее популярных разновидностей
NoSQL СУБД, где основной единицей логической модели данных является
документ - структурированный текст, с определенным синтаксисом.Иногда
встречаются мнения что модель данных в документных БД похожа на модель
данных в объектно-ориентированных базах данных. В этом есть доля
правды, единственная реальная разница между ними заключается в том,
что базы данных документов только сохраняют состояние, но не
поведение.Так же, само название "документо-ориентированная" подчас
вводит в заблуждение, и мне встречались коллеги, которые считали, что
это база для систем документооборота. Нет, это не так. Интересно, что
документные СУБД развиваются достаточно активно, и сейчас некоторые из
них, в том числе, поддерживают проверку схемы.Известными
представителями таких СУБД являются CouchDB, MongoDB, Amazon
DocumentDB.Когда выбирать документную СУБДЕсли нужно хранить объекты в
одной сущности, но с разной структурой. Если нужно хранит структуры,
включая объекты, списки и словари, особенно в формате близкому к
JSON.На самом деле область применения документных СУБД очень широкая.
Их можно использовать как компактную базу данных для отдельно взятого
микро-сервиса, так и для вполне масштабных решений, в качестве
хранилища состояний чего-либо.Когда не выбирать документную СУБДНе
самое лучшее решение для реализации транзакционная модели, и точно не
лучший вариант для формирования отчетности.Графовые СУБДГрафовые СУБД
- специфичный тип, предназначены для работы с графами, с их узлами,
свойствами, и произвольными отношениями между узлами. Очень простой
пример, это организация связей в различного типа социальных сетях, где
нужно хранить связи между пользователями (узлами) по разным критериям
(родственные связи, коллеги, общие интересы). Известные представители
этого типа субд - Neo4j, Amazon Neptune, InfiniteGraph, InfoGrid.Когда
выбирать графовые СУБДТочно стоит обратить внимание на графовые СУБД,
если строите какое-то подобие социальной сети, или реализуете систему
оценок и рекомендаций. Ну и во всех случаях когда вы хорошо понимаете
что такое графы, и для чего это нужно.Когда не выбирать графовые
СУБДПрактически во всех остальных случаях, кроме указанных выше, лучше
воздержаться от использования графовых СУБД.Колоночные СУБДКолоночные
СУБД очень похожи на реляционные. Они так же состоят из строк, которые
имеют атрибуты, а строки группируются в таблицах. Различия в
логических моделях несущественные, а вот на уровне физического
хранения данных различия значительные. В реляционных  СУБД данные
хранятся "построчно", это означает что для считывания значения
определенной колонки, придется прочитать практически всю строку, как
минимум от первой до нужной колонки. В колоночной СУБД данные хранятся
"поколоночно", т.е. колонка - это как отдельная таблица.
Соответственно чтение будет происходить из конкретного столбца сразу.
На практике это реально работает очень быстро (проверено мной на
нескольких реализованных хранилищах данных).Основные преимущества
колоночных СУБД – эффективное выполнения сложных аналитических
запросов на больших объемах, и легкое, практически мгновенное,
изменение структуры таблиц с данными, плюс существенная компрессия и
сжатие, которое позволяет значительно экономить место.Яркие
представители колоночных СУБД - Sybase IQ (ныне SAP IQ), Vertica,
ClickHouse, Google BigTable, InfoBright, Cassandra.Когда выбирать
колоночные СУБДОдин из весомых аргументов за использование именно
колоночной СУБД - это если вы хотите построить хранилище данных, и
планируете делать выборки со сложными аналитическими вычислениями.
Косвенный признак, который так же может сигнализировать о том, что
имеет смысл, хотя бы посмотреть в сторону колоночных СУБД - это если
количество строк, из которых делаются выборки, превышает сотни
миллионов.Когда не выбирать колоночные СУБДУчитывая специфику
колоночных СУБД, будет не эффективно ее использовать, если выборки
достаточно простые, параметры выборки статичны, и если преобладают
выборки по ключевым значениям. Так же, если количество строк в
таблице, из которой делается выборка, меньше сотен миллионов строк, то
скорее всего не будет большого преимущества, по сравнению с
реляционной СУБД.Нужно так же иметь ввиду, что в колоночных СУБД могут
быть и другие ограничения. Например, может отсутствовать поддержка
транзакций, а язык запросов может отличаться от классического SQL, и
прочее.ИтогиВажное замечание – не пытайтесь сразу все задачи решить в
рамках одной СУБД. Это более чем нормально иметь несколько разных
типов СУБД. Так же, не пытайтесь сразу определиться с производителем
СУБД, или связать свою жизнь с одним конкретным брендом.При выборе
типа СУБД следует, прежде всего, исходить из типа решаемых задач,
типов обрабатываемых данных, перспектив роста и
масштабирования.Обращайте так же внимание на популярность и наличие
широкого круга разработчиков и средств разработки – это даст вам
возможность, при необходимости, найти ответ на возникший вопрос
быстро.В данной статье я намеренно не делаю акцент на выбор между
облачными и on-premise решениями - эта тема одной из следующих
статей.Итак, в таблице представленной ниже, кратко собрано то, что
описано выше в статье.Тип СУБДКогда выбиратьПримеры популярных
СУБДРеляционныеНужна транзакционность; высокая нормализация; большая
доля операций на вставкуOracle, MySQL, Microsoft SQL Server,
PostgreSQLКлюч-значениеЗадачи кэширования и брокеры сообщенийRedis,
MemcachedДокументныеДля хранения объектов в одной сущности, но с
разной структурой; хранение структур на основе JSONCouchDB, MongoDB,
Amazon DocumentDBГрафовыеЗадачи подобные социальным сетям; системы
оценок и рекомендацийNeo4j, Amazon Neptune, InfiniteGraph,
InfoGridКолоночныеХранилища данных; выборки со сложными аналитическими
вычислениями; количество строк в таблице превышает сотни
миллионовVertica, ClickHouse, Google BigTable, Sybase \ SAP IQ,
InfoBright, CassandraНадеюсь данная статья оказалась полезной.В
следующих статьях посмотрим на выбор между облачными и on-premise
СУБД, платными и бесплатными, и многое другое.
