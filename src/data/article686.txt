Автор: Braincom
Дата: 2021-09-25T11:20:16.000Z
Название: Руководство по модулю клавиатуры Python
Теги: Python *
Текст:
ВведениеPython является одним из наиболее подходящих языков для
автоматизации задач. Будь то повторяемый (этический) веб-скоб через
некоторое время, запуск некоторых программ при запуске компьютера или
автоматизацию отправки повседневных электронных писем, Python имеет
много модулей, которые облегчают вашу жизнь.Одним из них является
модуль под названием keyboard, который полностью контролирует вашу
клавиатуру. С помощью данного модуля вы можете печатать что угодно,
создавать горячие клавиши,  сокращения, блокировать клавиатуру, ждать
ввода и т. д.В этом руководстве мы рассмотрим, как настроить и
использовать модуль клавиатуры в Python.Примечание: Приложения,
работающие с автоматизацией человекоподобных процессов, должны
разрабатываться этично и ответственно. Модуль клавиатуры сделан так,
чтобы быть очень заметным, и, таким образом, делает его одновременно
обескураживающим и прозрачным, если кто-то использует его для создания
клавиатурных шпионов или вредоносных ботов.Установка модуля
клавиатурыВерсия Python, используемая в этом руководстве, равна 3.8.
Однако модуль клавиатуры может работать как с Python 2.x, так и с
Python 3.x.Если вы используете Linnux, чтобы использовать эту
библиотеку, вы должны установить ее от root. Если вы этого не
сделаете, вы получите:ImportError: You must be root to use this
library on linux.Кроме того, при запуске сценария вы должны запускать
его с правами суперпользователя:$ sudo pip3 install keyboard $ sudo
python3 my_script.pyВ Windows и macOS, поскольку привилегии работают
совсем по-другому - вы можете установить его просто через pip и
запустить сценарии:$ pip install keyboard $ python
my_script.pyПримечание: Для MacOS вам, возможно, придется разрешить
терминалу или другим приложениям изменять состояние вашей машины,
например, путем ввода текста. Также имейте в виду, что по состоянию на
сентябрь 2021 года библиотека все еще находится в экспериментальном
состоянии на MacOS.Функция модуля клавиатурыВ этом модуле есть много
функций, которые можно использовать для имитации действий
клавиатуры.keyboard.write(message, [delay])- пишет сообщение с
задержкой или без нее.keyboard.wait(key) - блокирует программу до тех
пор, пока не будет нажата клавиша. Ключ передается в виде строки
("пробел", "esc" и т.д.)keyboard.press(key)- нажимает клавишу и
удерживается до вызова функции release(key)keyboard.release(key)-
выпускает ключ.keyboard.send(key)- нажимает и отпускает
клавишу.keyboard.add_hotkey(hotkey, function)- создает hotkey, которая
при нажатии выполняет function.keyboard.record(key)- записывает
активность клавиатуры до нажатия key.keyboard.play(recorded_events,
[speed_factor]) - воспроизводит события, записанные with
keyboard.record(key) функция, с дополнительным speed_factor.Тем не
менее, мы рассмотрим все это. Вот быстрый пример:>>> import keyboard
>>> keyboard.write("Hello") >>> HelloПриветственное сообщение
появляется на экране в терминале, как будто вы его написали. Вы можете
очень легко автоматизировать команду и создать для нее псевдоним
горячей клавиши. Вот (грубый) пример выхода из REPL Python, написания
команды curl:>>> import keyboard >>> keyboard.write("exit()");
keyboard.send("enter"); keyboard.write("curl https://www.google.com");
keyboard.send("enter"); >>> exit() curl https://www.google.com $ curl
https://www.google.com <!doctype html><html itemscope=""...Функции
write() и wait() клавиатурыКоманда write() записывает сообщение, как
мы видели ранее, с необязательной задержкой при запуске. Если задержка
не установлена, запись выполняется мгновенно. Это очень хорошо
сочетается с функцией wait (), которая ожидает нажатия определенной
клавиши.Например, мы можем создать импровизированный макрос,
привязанный, скажем, к 1, который отвечает на этот ввод новым
сообщением. Обратите внимание, что вместо этого есть фактический
способ создания горячих клавиш, который мы рассмотрим позже.Мы
создадим бесконечный цикл True, чтобы проверить, нажата ли клавиша, и
вы можете запустить сценарий в фоновом режиме:import keyboard  while
True:     keyboard.wait("1")     keyboard.write("\n The key '1' was
pressed!")Примечание: Специальные символы не поддерживаются этой
функцией, поэтому, если вы добавите, скажем, ! - вы получите
исключение остановки.Функции клавиши press() и release()Поскольку
сложно имитировать press () и release(), чтобы действия были видны, мы
также увидим в действии record() и play() .Функция press() нажимает
клавишу и отпускает ее, когда вы вызываете release() на той же
клавише. >>> import keyboard >>> from time import sleep >>>
keyboard.press("a") >>> sleep(1) >>> keyboard.release("a") >>> aТем не
менее, вы можете удерживать некоторые специальные клавиши, такие как
[SHIFT] или [CTRL] следующим образом:>>> keyboard.press("shift") >>>
keyboard.write("lowercase") >>> keyboard.release("shift")  >>>
LOWERCASEФункции клавиатуры record() и play()Речь не всегда идет о
вводе новых клавиш - иногда вы хотите записать происходящий и
воспроизвести это. Имейте в виду, что вам понадобятся права
администратора для записи любого подобного ввода, так как технология
может быть легко использована для создания кейлоггеров.Функция
record() принимает ключ запуска, до которого она записывает, и
возвращает последовательность событий типа KeyboardEvent. Затем вы
можете поместить эту последовательность событий в функцию play(),
которая точно воспроизводит их, с дополнительным аргументом
speed_factor. Он действует как множитель скорости исходных
событий:import keyboard recorded_events = keyboard.record("esc")
keyboard.play(recorded_events)Если мы напечатаем recorded_events, они
будут выглядеть примерно так:KeyboardEvent(w up), KeyboardEvent(o
down), ...] Функция клавиатуры send()Функция send() включает в себя
press () и release () вместе и используется для отдельных клавиш, в
отличие от функции write(), которая используется для целых
предложений:import keyboard  recorded_events = keyboard.record("s")
keyboard.send("w") keyboard.send("a")
keyboard.play(recorded_events)После нажатия клавиши s воспроизводятся
клавиши w и a.Функция press() также может принимать комбинации нажатых
клавиш. Вы можете отправить комбинацию "ctrl + shift + s", например, и
должен появиться диалог для сохранения файла, если вы находитесь в
приложении, которое поддерживает эту операцию:import keyboard  while
True:     keyboard.wait("s")         keyboard.press("ctrl+shift+s")
# Or for MacOS         keyboard.press("command+shift+s)Хотя это
неправильный способ добавить горячие клавиши. Также вы можете
использовать функцию add_hotkey().Функция клавиатуры
add_abreviation()Функция add_abbreviation() является довольно изящной,
так как она позволяет определять сокращения для длинных входных данных
и заменяет сокращенные версии сохраненными полными версиями.Например,
подобно тому, как такие службы, как Google, сохраняют вашу электронную
почту для большинства форм ввода, вы можете создать свою собственную
аббревиатуру и запустить ее через [SPACE]:>>> import keyboard >>>
keyboard.add_abbreviation("@", "john@stackabuse.com")Во время
выполнения, если вы введете @, за которым следует [ПРОБЕЛ] - ввод в
длинной форме заменит введенный @.Функция клавиатуры
add_hotkey()Функция add_hotkey() принимает горячую клавишу, которую вы
хотите сохранить, или комбинацию клавиш и функцию. Здесь легко
передать анонимные лямбда-функции, хотя вы также можете добавить
именованные функции.Например, давайте добавим горячую клавишу для
CTRL+j, которая запускает лямбда-функцию, регистрирующей это:import
keyboard  keyboard.add_hotkey("ctrl+alt+j", lambda: print("ctrl+alt+j
was pressed"))Горячая клавиша ctrl + alt + p сохраняется, и при
нажатии этой комбинации вы должны увидеть вывод
лямбды.ЗаключениеМодуль клавиатуры представляет собой легкую и простую
библиотеку, используемую для моделирования нажатий клавиш и простой
автоматизации в Python. Он не очень функциональный, но может быть
использован для автоматизации некоторых задач, которые вы можете
выполнять в своей повседневной работе, или просто для развлечения.
