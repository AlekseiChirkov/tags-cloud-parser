Автор: F0iL
Дата: 2021-09-27T12:31:54.000Z
Название: Почему с using namespace std; может быть очень плохо
Теги: Программирование *, Совершенный код *, C++ *, Компиляторы *
Текст:
То, что написано ниже, для многих квалифицированных C++ разработчиков
будет прекрасно известным и очевидным, но тем не менее, я периодически
встречаю using namespace std; в коде различных проектов, а недавно в
нашумевшей статье про впечатления от высшего образования было
упомянуто, что студентов так учат писать код в вузах, что и сподвигло
меня написать эту заметку.Итак... многие слышали, что using namespace
std; в начале файла в C++ считается плохой практикой и нередко даже
явно запрещен в принятых во многих проектах стандартах кодирования.
Касательно недопустимости использования using namespace в header-
файлах вопросов обычно не возникает, если мы хоть немного понимаем,
как работает препроцессор компилятора: .hpp-файлы при использовании
директивы #include вставляются в код "как есть", и соответственно
using автоматически распространится на все затронутые .hpp- и .cpp-
файлы, если файл с ним был заинклюден хоть в одном звене цепочки (на
одном из сайтов это метко обозвали "заболеванием передающимся половым
путем"). Но вот про .cpp-файлы все не так очевидно, так что давайте
еще раз разберем, что же именно здесь не так.Для чего вообще придумали
пространства имен в C++? Когда какие-то две сущности (типы, функции, и
т.д.) имеют идентификаторы, которые могут конфликтовать друг с другом
при совместном использовании, C++ позволяет объявлять пространства с
помощью ключевого слова namespace. Всё, что объявлено внутри
пространства имен, принадлежит только этому пространству имен (а не
глобальному). Используя using мы вытаскиваем сущности какого-либо
пространства имен в глобальный контекст.А теперь посмотрим, к чему это
может привести. Допустим, вы используете две библиотеки под названием
Foo и Bar и написали в начале файла что-то типаusing namespace foo;
using namespace bar;...таким образом вытащив всё, что есть в foo:: и в
bar:: в глобальное пространство имен.Все работает нормально, и вы
можете без проблем вызвать Blah() из Foo и Quux() из Bar. Но однажды
вы обновляете библиотеку Foo до новой версии Foo 2.0, которая теперь
еще имеет в себе функцию Quux(). Теперь у вас конфликт: и Foo 2.0, и
Bar импортируют Quux() в ваше глобальное пространство имен. В лучшем
случае это вызовет ошибку на этапе компиляции, и исправление этого
потребует усилий и времени. А вот если бы вы явно указывали в коде
метод с его пространством имен, а именно, foo::Blah() и bar::Quux(),
то добавление foo::Quux() не было бы проблемой.Но всё может быть даже
хуже!В библиотеку Foo 2.0 могла быть добавлена функция foo::Quux(),
про которую компилятор по ряду причин посчитает, что она однозначно
лучше подходит для некоторых ваших вызовов Quux(), чем bar::Quux(),
вызывавшаяся в вашем коде на протяжении многих лет. Тогда ваш код все
равно скомпилируется, но будет молча вызывать неправильную функцию и
делать бог весть что. И это может привести к куче неожиданных и
сложноотлаживающихся ошибок.Имейте в виду, что пространство имен std::
имеет множество идентификаторов, многие из которых являются очень
распространенными (list, sort, string, iterator, swap), которые,
скорее всего, могут появиться и в другом коде, либо наоборот, в
следущей версии стандарта C++ в std добавят что-то, что совпадет с
каким-то из идентификаторов в вашем существующем коде.Если вы считаете
это маловероятным, то посмотрим на реальные примеры со
stackoverflow:Вот тут был задан вопрос о том, почему код возвращает
совершенно не те результаты, что от него ожидает разработчик. По факту
там происходит именно описанное выше: разработчик передает в функцию
аргументы неправильного типа, но это не вызывает ошибку компиляции, а
компилятор просто молча использует вместо объявленной выше функции
distance() библиотечную функцию std::distance() из std:: ставшего
глобальным неймспейсом.Второй пример на ту же тему: вместо функции
swap() используется std::swap(). Опять же, никакой ошибки компиляции,
а просто неправильный результат работы.Так что подобное происходит
гораздо чаще, чем кажется.P.S. В комментариях еще была упомянута такая
штука, как Argument Dependent Lookup, она же Koenig lookup. Почитать
подробнее можно на Википедии, но в итоге лекарство от этой проблемы
такое же: явное указание пространства имен перед вызовом функций
везде, где только можно.
