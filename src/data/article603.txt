Автор: slava-a
Дата: 2021-09-27T12:52:59.000Z
Название: Что происходит, когда вводишь url, или как работает интернет
Теги: Блог компании Karuna, Программирование *, IT-инфраструктура *, Сетевые
технологии *, Стандарты связи
Текст:
Об этом спрашивают на собеседованиях. Структурированное понимание
этого может помочь вам, даже если вы давно строите сложные
архитектурные процессы или кодите 20-ый год подряд. Я — программист
уже много лет, последние пару из которых пишу на Go в Каруне. Работа
работой, а внутренний исследователь не дремлет. И вот я наконец-то
решил привести в порядок информацию, разбросанную по разным закоулкам
чертогов разума, по добротным книгам и статьям на тему сетевых
технологий.Хочу представить краткую выжимку о работе протоколов. А
если тема окажется интересной, могу продолжить работать с ней более
детально. Рассмотрим простейший пример: вы ввели некоторый url в
адресную строку. Поехали.The Open Systems Interconnection model
(OSI)Для начала придётся упомянуть семиуровневую модель OSI, с
которой, возможно, каждый из вас знаком не понаслышке. Эталонная
модель взаимодействия открытых систем является абстракцией, которая
связывает и стандартизирует взаимодействие открытых систем. Она не
описывает никакие используемые протоколы, а только определяет, какие
функции выполняет каждый из её уровней. В основе любого сетевого
взаимодействия лежит данная модель. Для привычного нам интернета схема
OSI и соответствующие ей протоколы чаще всего имеют следующий
вид:Эталонная модель OSI и соответствие ей протоколов
ИнтернетаНекоторые уровни могут отсутствовать и/или объединяться.
Рассматривать работу схемы начнём с верхнего уровня — с того самого
ввода адреса в адресную строку.Прикладной уровень, HTTPПрикладной
уровень в модели OSI нужен для взаимодействия пользовательских
приложений с сетью. Единица данных, которой оперирует прикладной
уровень, называется сообщением. В описываемой системе уровень
представлен протоколом HTTP. При вводе адреса google.com ваш браузер
формирует HTTP сообщение, которое состоит из строки запроса, тела
сообщения и заголовков со служебной информацией — такой как версия
протокола, контрольная сумма сообщения, и т.д. Далее задача в том,
чтобы передать HTTP-сообщение на следующий уровень — представления,
если это HTTPS, или на TCP, если это HTTP.Уровень представления, SSL
(TLS)Уровень представления отвечает за кодирование/декодирование, а
также за шифрование/дешифрование данных. Благодаря этому уровню
информация, передаваемая одной системой, всегда понятна другой
системе.Если сервер, к которому вы посылаете запрос, работает на
протоколе HTTPS, то в него включён протокол защиты данных — SSL. SSL
развивался до версии 3.0. Потом на основе него был создан TLS, который
сейчас используется везде и гарантирует безопасность соединения.
Принцип работы протокола базируется на ассиметричном шифровании и для
создания безопасного канала связи оперирует такими понятиями как
публичный ключ, приватный ключ, сеансовый ключ.Ваш браузер и сервер
заново создают защищённое соединение при каждом открытии сайта. Как же
это работает? Для начала браузер создаёт запрос на запрашиваемый
адрес, чтобы узнать есть ли у него SSL-сертификат. В ответ на запрос
он получает информацию и публичный ключ, с полученной информацией
делает запрос в центр сертификации (адреса центров сертификации уже
есть в вашем браузере по умолчанию). Если информация подтверждается,
ваш браузер генерирует сеансовый ключ, зашифровывает его публичным
ключом и отправляет на сервер. Сервер расшифровывает сообщение с
помощью приватного ключа и сохраняет сеансовый ключ. После этого
соединение можно считать установленным — при общении клиента и сервера
используется для шифрования сеансовый ключ. И "общение" между клиентом
и сервером переходит на симметричное шифрование с помощью
сгенерированного сеансового ключа.Транспортный уровень,
TCPТранспортный уровень по определению обеспечивает передачу данных со
степенью надёжности, которая требуется приложениям. В сети Интернет, в
рассматриваемом взаимодействии, этот уровень представлен протоколом
TCP, задача которого — надёжно доставить HTTP(S)-сообщение в пункт
назначения. Единица данных как для TCP уровня, так и для следующего
(IP) носит название пакет.Операционная система, получив HTTP-сообщение
от браузера, должна "встроить" его в пакет протокола нижележащего
уровня — TCP. Такой процесс встраивания называется инкапсуляцией.
Операция эта осуществляется на каждом уровне: пакеты вышележащего
уровня инкапсулируются в пакеты нижележащего. И на самом нижнем уровне
мы получаем информационную “матрёшку” с вложенными друг в друга
пакетами, со служебной информацией в виде заголовков, добавленных на
каждом уровне:Формируются TCP-пакеты чаще всего в ядре операционной
системы. Вся прелесть протокола TCP — в надёжности доставки.
Использование этого протокола предусматривает установление так
называемого логического соединения между двумя конечными узлами сети
(перед этим, естественно, такое соединение нужно согласовать).
Надёжную доставку пакетов протокол TCP обеспечивает посредством
нумерации пакетов, подтверждения их передачи квитанциями, а также
контроля правильного порядка пакетов. Схема установления логического
соединения, передачи данных и разрыва соединения представлена на
рисунке ниже:Работа хостов с помощью логического соединенияСетевой
уровень, IPСетевой уровень в общем случае нужен для образования единой
транспортной системы, которая объединяет несколько сетей. Сети,
кстати, могут иметь разные стеки протоколов. Также на этом уровне
определяется маршрут пересылки пакетов от отправителя к получателю.По
ходу перемещения IP-пакета по сети маршрутизаторы передают пакеты от
одной сети к другой или же на конечный узел-получатель. Данный
протокол не занимается установлением соединения, не контролирует
целостность данных, не гарантирует доставку и не отвечает за их
достоверность, то есть реализует политику доставки "по возможности".
Всё это бремя возложено на вышележащий протокол — TCP. Получив TCP-
пакет, ОС инкапсулирует его в IP-пакет, добавляет в него свои
параметры и передаёт далее.DNSДля того чтобы отправить какие-то данные
серверу в IP-пакете, нужно узнать его IP-адрес. Для этого есть
специальный протокол DNS, с помощью которого делается отдельный от
основного запрос. Запрос этот называется DNS-запросом, и посылается он
на специальный DNS сервер — его адрес заведомо известен и прописал в
настройках вашей операционной системы. DNS-протокол — это
представитель протокола прикладного уровня. Кратко его работу можно
описать так:Клиент создает DNS-сообщение, добавляя неизвестный URL в
раздел вопроса этого сообщения.Сообщение DNS инкапсулируется в UDP-
дейтаграмму протокола UDP транспортного уровня.UDP-дейтаграмма
инкапсулируется в IP-пакет данных с IP-адресом назначения DNS-сервера
и отправляется на DNS-сервер.DNS-сервер возвращает запись ресурса, в
которой указан IP-адрес URL.Строго говоря, запрос этот выполняется не
всегда. Так как вначале браузер проверяет соответствие IP адреса и
домена в своем кэше (для chrome это chrome://net-internals/#dns).
Затем, если соответствия не найдено, браузер обращается к операционной
системе, которая ищет информацию в системном файле hosts. И только в
случае, если ничего не найдено в этом файле, посылается запрос DNS.
Полученный адрес уже можно указать в формируемом IP-пакете основного
запроса.Физический и канальный уровни, EthernetКанальный уровень
(также — уровень передачи данных) необходим для передачи сырых данных
физического уровня по надежной линии связи. Основная задача на этом
уровне — обнаружение и коррекция ошибок. Также он может исправлять
ошибки за счёт повторной передачи поврежденных кадров. Канальный
уровень тоже должен проверить доступность среды — можно ли выполнять
пересылку данных в конкретный момент. Иногда эту функцию выделяют в
отдельный подуровень управления доступом к среде (MAC).Физический
уровень отвечает за передачу потока битов по каналам физической связи
(коаксиальные кабеля, оптоволокно, витая пара). Со стороны компьютера
функции физического уровня выполняет сетевой адаптер или COM-порт. На
этом уровне есть только поток битов и ничего более: протокол "не
задумывается" об информации, которую он передаёт.В нашем случае
протокол Ethernet объединяет эти два уровня. Ethernet оперирует
единицей данных, которая называется кадр. Для физического уровня нет
никакого анализа информации, которая передаётся. Для передачи данных
между узлами протокол работает по схеме с коммутацией пакетов, то есть
сеть ведёт себя менее "ответственно", не создавая для абонентов
отдельных каналов связи. Данные могут задерживаться и даже теряться.
Поэтому ошибки на этом уровне не исправляются. Это опять же возложено
на протокол верхнего уровня — TCP.Для физического уровня Ethernet
описывается стандартом группы IEEE 802.3, который определяет
физические характеристики канала связи. Например, какой кабель будет
использоваться для передачи данных: витая пара, коаксиальный кабель
или оптоволокно. Тут же определяется вид кодирования и модуляции
сигнала. Технические характеристики каждого стандарта хорошо описаны в
данной статье. Например, спецификация 100Base-T определяет в качестве
используемого кабеля витую пару, с максимальной длинной физического
сегмента 100 метров и манчестерским кодом для данных в кабеле.Путь
пакетаНа следующей схеме представлена схема взаимодействия узлов сети.
Наш пакет выходит из конечного узла слева, проходя через
концентраторы, коммутаторы (работающие на канальном уровне) и
маршрутизаторы, работающие на сетевом уровне:Общая схема
взаимодействия узлов сетиКак видно из схемы, концентратор работает с
данными на физическом уровне, но в настоящее время они вытеснены
сетевыми коммутаторами, умеющими работать на канальном и физическом
уровнях.Совершив путь от одного конечного узла до другого, он
распаковывается в обратном порядке: из Ethernet-кадра вытаскивается
IP-пакет, из него, в свою очередь, TCP-пакет. Получив в конечном счёте
HTTP-сообщение и считав с него нужную информацию, сервер формирует и
посылает ответное HTTP-сообщение. Оно, в свою очередь, также проходит
через каждый уровень и возвращается в виде ответа клиенту,
распаковывается каждым уровнем, и мы видим заветную информацию на
экране.Конечно, это краткий обзор того, что происходит в сети Интернет
на примере HTTP-запроса. Существует много деталей, которые не вошли в
эту статью, дабы не растягивать её до бесконечности, но, надеюсь,
войдут в будущие мои обзоры. Книги, которые помогли мне. Рекомендую и
вам:Олифер В.Г., Олифер Н.А. Компьютерные сети. Принципы, технологии,
протоколы - СПб.: Питер, 2018. - 992Таненбаум Э., Уэзеролл Д.
Компьютерные сет - СПб.: Питер, 2020. - 960 с.: ил.
